// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package importardatoscsvabd.dimproducto_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: DimProducto Purpose: DimProducto<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class DimProducto implements TalendJob {
	static {System.setProperty("TalendJob.log", "DimProducto.log");}

	

	
	private static org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(DimProducto.class);
	

protected static void logIgnoredError(String message, Throwable cause) {
       log.error(message, cause);

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(Desarrollo_Datawarehouse_AdditionalParams != null){
				
					this.setProperty("Desarrollo_Datawarehouse_AdditionalParams", Desarrollo_Datawarehouse_AdditionalParams.toString());
				
			}
			
			if(Desarrollo_Datawarehouse_Server != null){
				
					this.setProperty("Desarrollo_Datawarehouse_Server", Desarrollo_Datawarehouse_Server.toString());
				
			}
			
			if(Desarrollo_Datawarehouse_Password != null){
				
					this.setProperty("Desarrollo_Datawarehouse_Password", Desarrollo_Datawarehouse_Password.toString());
				
			}
			
			if(Desarrollo_Datawarehouse_Database != null){
				
					this.setProperty("Desarrollo_Datawarehouse_Database", Desarrollo_Datawarehouse_Database.toString());
				
			}
			
			if(Desarrollo_Datawarehouse_Port != null){
				
					this.setProperty("Desarrollo_Datawarehouse_Port", Desarrollo_Datawarehouse_Port.toString());
				
			}
			
			if(Desarrollo_Datawarehouse_Schema != null){
				
					this.setProperty("Desarrollo_Datawarehouse_Schema", Desarrollo_Datawarehouse_Schema.toString());
				
			}
			
			if(Desarrollo_Datawarehouse_Login != null){
				
					this.setProperty("Desarrollo_Datawarehouse_Login", Desarrollo_Datawarehouse_Login.toString());
				
			}
			
			if(Desarrollo_Transaccional_Database != null){
				
					this.setProperty("Desarrollo_Transaccional_Database", Desarrollo_Transaccional_Database.toString());
				
			}
			
			if(Desarrollo_Transaccional_Password != null){
				
					this.setProperty("Desarrollo_Transaccional_Password", Desarrollo_Transaccional_Password.toString());
				
			}
			
			if(Desarrollo_Transaccional_AdditionalParams != null){
				
					this.setProperty("Desarrollo_Transaccional_AdditionalParams", Desarrollo_Transaccional_AdditionalParams.toString());
				
			}
			
			if(Desarrollo_Transaccional_Schema != null){
				
					this.setProperty("Desarrollo_Transaccional_Schema", Desarrollo_Transaccional_Schema.toString());
				
			}
			
			if(Desarrollo_Transaccional_Login != null){
				
					this.setProperty("Desarrollo_Transaccional_Login", Desarrollo_Transaccional_Login.toString());
				
			}
			
			if(Desarrollo_Transaccional_Port != null){
				
					this.setProperty("Desarrollo_Transaccional_Port", Desarrollo_Transaccional_Port.toString());
				
			}
			
			if(Desarrollo_Transaccional_Server != null){
				
					this.setProperty("Desarrollo_Transaccional_Server", Desarrollo_Transaccional_Server.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String Desarrollo_Datawarehouse_AdditionalParams;
public String getDesarrollo_Datawarehouse_AdditionalParams(){
	return this.Desarrollo_Datawarehouse_AdditionalParams;
}
public String Desarrollo_Datawarehouse_Server;
public String getDesarrollo_Datawarehouse_Server(){
	return this.Desarrollo_Datawarehouse_Server;
}
public java.lang.String Desarrollo_Datawarehouse_Password;
public java.lang.String getDesarrollo_Datawarehouse_Password(){
	return this.Desarrollo_Datawarehouse_Password;
}
public String Desarrollo_Datawarehouse_Database;
public String getDesarrollo_Datawarehouse_Database(){
	return this.Desarrollo_Datawarehouse_Database;
}
public String Desarrollo_Datawarehouse_Port;
public String getDesarrollo_Datawarehouse_Port(){
	return this.Desarrollo_Datawarehouse_Port;
}
public String Desarrollo_Datawarehouse_Schema;
public String getDesarrollo_Datawarehouse_Schema(){
	return this.Desarrollo_Datawarehouse_Schema;
}
public String Desarrollo_Datawarehouse_Login;
public String getDesarrollo_Datawarehouse_Login(){
	return this.Desarrollo_Datawarehouse_Login;
}
public String Desarrollo_Transaccional_Database;
public String getDesarrollo_Transaccional_Database(){
	return this.Desarrollo_Transaccional_Database;
}
public java.lang.String Desarrollo_Transaccional_Password;
public java.lang.String getDesarrollo_Transaccional_Password(){
	return this.Desarrollo_Transaccional_Password;
}
public String Desarrollo_Transaccional_AdditionalParams;
public String getDesarrollo_Transaccional_AdditionalParams(){
	return this.Desarrollo_Transaccional_AdditionalParams;
}
public String Desarrollo_Transaccional_Schema;
public String getDesarrollo_Transaccional_Schema(){
	return this.Desarrollo_Transaccional_Schema;
}
public String Desarrollo_Transaccional_Login;
public String getDesarrollo_Transaccional_Login(){
	return this.Desarrollo_Transaccional_Login;
}
public String Desarrollo_Transaccional_Port;
public String getDesarrollo_Transaccional_Port(){
	return this.Desarrollo_Transaccional_Port;
}
public String Desarrollo_Transaccional_Server;
public String getDesarrollo_Transaccional_Server(){
	return this.Desarrollo_Transaccional_Server;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "DimProducto";
	private final String projectName = "IMPORTARDATOSCSVABD";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();
	StatCatcherUtils talendStats_STATS = new StatCatcherUtils("__2usMEYYEe6lZ9mRkkBcKw", "0.1");
	MetterCatcherUtils talendMeter_METTER = new MetterCatcherUtils("__2usMEYYEe6lZ9mRkkBcKw", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				DimProducto.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(DimProducto.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				talendLogs_LOGSProcess(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void preStaLogCon_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBSCD_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void connectionStatsLogs_Commit_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					connectionStatsLogs_Commit_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void connectionStatsLogs_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendStats_STATS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendStats_DB_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendStats_DB_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendStats_STATS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendLogs_LOGS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_DB_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_DB_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendMeter_METTER_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendMeter_DB_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendMeter_DB_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendMeter_METTER_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void preStaLogCon_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void connectionStatsLogs_Commit_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void connectionStatsLogs_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendStats_STATS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendMeter_METTER_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void preStaLogConProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [preStaLogCon begin ] start
	 */

	

	
		
		ok_Hash.put("preStaLogCon", false);
		start_Hash.put("preStaLogCon", System.currentTimeMillis());
		
	
	currentComponent="preStaLogCon";

	
		int tos_count_preStaLogCon = 0;
		

 



/**
 * [preStaLogCon begin ] stop
 */
	
	/**
	 * [preStaLogCon main ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 


	tos_count_preStaLogCon++;

/**
 * [preStaLogCon main ] stop
 */
	
	/**
	 * [preStaLogCon process_data_begin ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon process_data_begin ] stop
 */
	
	/**
	 * [preStaLogCon process_data_end ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon process_data_end ] stop
 */
	
	/**
	 * [preStaLogCon end ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 

ok_Hash.put("preStaLogCon", true);
end_Hash.put("preStaLogCon", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("after_preStaLogCon_connectionStatsLogs", 0, "ok");
				}
				connectionStatsLogsProcess(globalMap);



/**
 * [preStaLogCon end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [preStaLogCon finally ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBConnection_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBConnection_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBConnection_1 = new StringBuilder();
                    log4jParamters_tDBConnection_1.append("Parameters:");
                            log4jParamters_tDBConnection_1.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_tDBConnection_1.append(" | ");
                            log4jParamters_tDBConnection_1.append("HOST" + " = " + "context.Desarrollo_Transaccional_Server");
                        log4jParamters_tDBConnection_1.append(" | ");
                            log4jParamters_tDBConnection_1.append("PORT" + " = " + "context.Desarrollo_Transaccional_Port");
                        log4jParamters_tDBConnection_1.append(" | ");
                            log4jParamters_tDBConnection_1.append("SCHEMA_DB" + " = " + "context.Desarrollo_Transaccional_Schema");
                        log4jParamters_tDBConnection_1.append(" | ");
                            log4jParamters_tDBConnection_1.append("DBNAME" + " = " + "context.Desarrollo_Transaccional_Database");
                        log4jParamters_tDBConnection_1.append(" | ");
                            log4jParamters_tDBConnection_1.append("USER" + " = " + "context.Desarrollo_Transaccional_Login");
                        log4jParamters_tDBConnection_1.append(" | ");
                            log4jParamters_tDBConnection_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Desarrollo_Transaccional_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBConnection_1.append(" | ");
                            log4jParamters_tDBConnection_1.append("PROPERTIES" + " = " + "context.Desarrollo_Transaccional_AdditionalParams");
                        log4jParamters_tDBConnection_1.append(" | ");
                            log4jParamters_tDBConnection_1.append("USE_SHARED_CONNECTION" + " = " + "false");
                        log4jParamters_tDBConnection_1.append(" | ");
                            log4jParamters_tDBConnection_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBConnection_1.append(" | ");
                            log4jParamters_tDBConnection_1.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_tDBConnection_1.append(" | ");
                            log4jParamters_tDBConnection_1.append("AUTO_COMMIT" + " = " + "true");
                        log4jParamters_tDBConnection_1.append(" | ");
                            log4jParamters_tDBConnection_1.append("SHARE_IDENTITY_SETTING" + " = " + "false");
                        log4jParamters_tDBConnection_1.append(" | ");
                            log4jParamters_tDBConnection_1.append("UNIFIED_COMPONENTS" + " = " + "tMSSqlConnection");
                        log4jParamters_tDBConnection_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBConnection_1 - "  + (log4jParamters_tDBConnection_1) );
                    } 
                } 
            new BytesLimit65535_tDBConnection_1().limitLog4jByte();
            }
	

			    
		    String url_tDBConnection_1 = "jdbc:sqlserver://" + context.Desarrollo_Transaccional_Server ;
		String port_tDBConnection_1 = context.Desarrollo_Transaccional_Port;
		String dbname_tDBConnection_1 = context.Desarrollo_Transaccional_Database ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + context.Desarrollo_Transaccional_Port;
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    				    
		    	url_tDBConnection_1 += ";databaseName=" + context.Desarrollo_Transaccional_Database; 
    	}

		url_tDBConnection_1 += ";appName=" + projectName + ";" + context.Desarrollo_Transaccional_AdditionalParams;  
	String dbUser_tDBConnection_1 = context.Desarrollo_Transaccional_Login;
	
	
		
	final String decryptedPassword_tDBConnection_1 = context.Desarrollo_Transaccional_Password; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
	    		log.debug("tDBConnection_1 - Driver ClassName: "+driverClass_tDBConnection_1+".");
			
	    		log.debug("tDBConnection_1 - Connection attempt to '" + url_tDBConnection_1 + "' with the username '" + dbUser_tDBConnection_1 + "'.");
			
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);
	    		log.debug("tDBConnection_1 - Connection to '" + url_tDBConnection_1 + "' has succeeded.");
			

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			log.debug("tDBConnection_1 - Connection is set auto commit to 'true'.");
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("dbschema_tDBConnection_1", context.Desarrollo_Transaccional_Schema);

	globalMap.put("db_tDBConnection_1",  context.Desarrollo_Transaccional_Database);
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

	globalMap.put("driver_tDBConnection_1", "MSSQL_PROP");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 
                if(log.isDebugEnabled())
            log.debug("tDBConnection_1 - "  + ("Done.") );

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";

	
		int tos_count_tDBConnection_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBConnection_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBConnection_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBConnection_2 = new StringBuilder();
                    log4jParamters_tDBConnection_2.append("Parameters:");
                            log4jParamters_tDBConnection_2.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_tDBConnection_2.append(" | ");
                            log4jParamters_tDBConnection_2.append("HOST" + " = " + "context.Desarrollo_Datawarehouse_Server");
                        log4jParamters_tDBConnection_2.append(" | ");
                            log4jParamters_tDBConnection_2.append("PORT" + " = " + "context.Desarrollo_Datawarehouse_Port");
                        log4jParamters_tDBConnection_2.append(" | ");
                            log4jParamters_tDBConnection_2.append("SCHEMA_DB" + " = " + "context.Desarrollo_Datawarehouse_Schema");
                        log4jParamters_tDBConnection_2.append(" | ");
                            log4jParamters_tDBConnection_2.append("DBNAME" + " = " + "context.Desarrollo_Datawarehouse_Database");
                        log4jParamters_tDBConnection_2.append(" | ");
                            log4jParamters_tDBConnection_2.append("USER" + " = " + "context.Desarrollo_Datawarehouse_Login");
                        log4jParamters_tDBConnection_2.append(" | ");
                            log4jParamters_tDBConnection_2.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Desarrollo_Datawarehouse_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBConnection_2.append(" | ");
                            log4jParamters_tDBConnection_2.append("PROPERTIES" + " = " + "context.Desarrollo_Datawarehouse_AdditionalParams");
                        log4jParamters_tDBConnection_2.append(" | ");
                            log4jParamters_tDBConnection_2.append("USE_SHARED_CONNECTION" + " = " + "false");
                        log4jParamters_tDBConnection_2.append(" | ");
                            log4jParamters_tDBConnection_2.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBConnection_2.append(" | ");
                            log4jParamters_tDBConnection_2.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_tDBConnection_2.append(" | ");
                            log4jParamters_tDBConnection_2.append("AUTO_COMMIT" + " = " + "true");
                        log4jParamters_tDBConnection_2.append(" | ");
                            log4jParamters_tDBConnection_2.append("SHARE_IDENTITY_SETTING" + " = " + "false");
                        log4jParamters_tDBConnection_2.append(" | ");
                            log4jParamters_tDBConnection_2.append("UNIFIED_COMPONENTS" + " = " + "tMSSqlConnection");
                        log4jParamters_tDBConnection_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBConnection_2 - "  + (log4jParamters_tDBConnection_2) );
                    } 
                } 
            new BytesLimit65535_tDBConnection_2().limitLog4jByte();
            }
	

			    
		    String url_tDBConnection_2 = "jdbc:sqlserver://" + context.Desarrollo_Datawarehouse_Server ;
		String port_tDBConnection_2 = context.Desarrollo_Datawarehouse_Port;
		String dbname_tDBConnection_2 = context.Desarrollo_Datawarehouse_Database ;
    	if (!"".equals(port_tDBConnection_2)) {
    		url_tDBConnection_2 += ":" + context.Desarrollo_Datawarehouse_Port;
    	}
    	if (!"".equals(dbname_tDBConnection_2)) {
    				    
		    	url_tDBConnection_2 += ";databaseName=" + context.Desarrollo_Datawarehouse_Database; 
    	}

		url_tDBConnection_2 += ";appName=" + projectName + ";" + context.Desarrollo_Datawarehouse_AdditionalParams;  
	String dbUser_tDBConnection_2 = context.Desarrollo_Datawarehouse_Login;
	
	
		
	final String decryptedPassword_tDBConnection_2 = context.Desarrollo_Datawarehouse_Password; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
	    		log.debug("tDBConnection_2 - Driver ClassName: "+driverClass_tDBConnection_2+".");
			
	    		log.debug("tDBConnection_2 - Connection attempt to '" + url_tDBConnection_2 + "' with the username '" + dbUser_tDBConnection_2 + "'.");
			
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);
	    		log.debug("tDBConnection_2 - Connection to '" + url_tDBConnection_2 + "' has succeeded.");
			

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			log.debug("tDBConnection_2 - Connection is set auto commit to 'true'.");
			conn_tDBConnection_2.setAutoCommit(true);
	}

	globalMap.put("dbschema_tDBConnection_2", context.Desarrollo_Datawarehouse_Schema);

	globalMap.put("db_tDBConnection_2",  context.Desarrollo_Datawarehouse_Database);
	
	globalMap.put("shareIdentitySetting_tDBConnection_2",  false);

	globalMap.put("driver_tDBConnection_2", "MSSQL_PROP");

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 
                if(log.isDebugEnabled())
            log.debug("tDBConnection_2 - "  + ("Done.") );

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_IMPORTARDATOSCSVABD_DimProducto = new byte[0];
    static byte[] commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[0];

	
			    public int ProductoID;

				public int getProductoID () {
					return this.ProductoID;
				}
				
			    public String NumeroProducto;

				public String getNumeroProducto () {
					return this.NumeroProducto;
				}
				
			    public String ColorProducto;

				public String getColorProducto () {
					return this.ColorProducto;
				}
				
			    public String TamanoProducto;

				public String getTamanoProducto () {
					return this.TamanoProducto;
				}
				
			    public String LineaProducto;

				public String getLineaProducto () {
					return this.LineaProducto;
				}
				
			    public String ClaseProducto;

				public String getClaseProducto () {
					return this.ClaseProducto;
				}
				
			    public Object CostoEstandar;

				public Object getCostoEstandar () {
					return this.CostoEstandar;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length) {
				if(length < 1024 && commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length == 0) {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[1024];
				} else {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length);
			strReturn = new String(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length) {
				if(length < 1024 && commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length == 0) {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[1024];
				} else {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length);
			strReturn = new String(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTARDATOSCSVABD_DimProducto) {

        	try {

        		int length = 0;
		
			        this.ProductoID = dis.readInt();
					
					this.NumeroProducto = readString(dis);
					
					this.ColorProducto = readString(dis);
					
					this.TamanoProducto = readString(dis);
					
					this.LineaProducto = readString(dis);
					
					this.ClaseProducto = readString(dis);
					
						this.CostoEstandar = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_IMPORTARDATOSCSVABD_DimProducto) {

        	try {

        		int length = 0;
		
			        this.ProductoID = dis.readInt();
					
					this.NumeroProducto = readString(dis);
					
					this.ColorProducto = readString(dis);
					
					this.TamanoProducto = readString(dis);
					
					this.LineaProducto = readString(dis);
					
					this.ClaseProducto = readString(dis);
					
						this.CostoEstandar = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductoID);
					
					// String
				
						writeString(this.NumeroProducto,dos);
					
					// String
				
						writeString(this.ColorProducto,dos);
					
					// String
				
						writeString(this.TamanoProducto,dos);
					
					// String
				
						writeString(this.LineaProducto,dos);
					
					// String
				
						writeString(this.ClaseProducto,dos);
					
					// Object
				
       			    	dos.writeObject(this.CostoEstandar);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductoID);
					
					// String
				
						writeString(this.NumeroProducto,dos);
					
					// String
				
						writeString(this.ColorProducto,dos);
					
					// String
				
						writeString(this.TamanoProducto,dos);
					
					// String
				
						writeString(this.LineaProducto,dos);
					
					// String
				
						writeString(this.ClaseProducto,dos);
					
					// Object
				
       			    	dos.writeObject(this.CostoEstandar);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductoID="+String.valueOf(ProductoID));
		sb.append(",NumeroProducto="+NumeroProducto);
		sb.append(",ColorProducto="+ColorProducto);
		sb.append(",TamanoProducto="+TamanoProducto);
		sb.append(",LineaProducto="+LineaProducto);
		sb.append(",ClaseProducto="+ClaseProducto);
		sb.append(",CostoEstandar="+String.valueOf(CostoEstandar));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				sb.append(ProductoID);
        			
        			sb.append("|");
        		
        				if(NumeroProducto == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NumeroProducto);
            			}
            		
        			sb.append("|");
        		
        				if(ColorProducto == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ColorProducto);
            			}
            		
        			sb.append("|");
        		
        				if(TamanoProducto == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TamanoProducto);
            			}
            		
        			sb.append("|");
        		
        				if(LineaProducto == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LineaProducto);
            			}
            		
        			sb.append("|");
        		
        				if(ClaseProducto == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ClaseProducto);
            			}
            		
        			sb.append("|");
        		
        				if(CostoEstandar == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CostoEstandar);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tDBSCD_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBSCD_1", false);
		start_Hash.put("tDBSCD_1", System.currentTimeMillis());
		
	
	currentComponent="tDBSCD_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tDBSCD_1 = 0;
		



        class SCDSK_tDBSCD_1 {
private int hashCode;
public boolean hashCodeDirty = true;
int ProductoID;
public boolean equals(Object obj) {
if (this == obj) return true;
if (obj == null) return false;
if (getClass() != obj.getClass()) return false;
final SCDSK_tDBSCD_1 other = (SCDSK_tDBSCD_1) obj;
if (this.ProductoID!= other.ProductoID)
return false;

return true;
}
public int hashCode() {
if(hashCodeDirty) {
int prime = 31;hashCode = prime * hashCode + ProductoID;
hashCodeDirty = false;
}
return hashCode;
}
}

    class SCDStruct_tDBSCD_1 {
private String TamanoProducto;
private String NumeroProducto;
private String ClaseProducto;
private String ColorProducto;
private String LineaProducto;
private Object CostoEstandar;
private int scd_version;
}

    int nb_line_update_tDBSCD_1 = 0;
    int nb_line_inserted_tDBSCD_1 = 0;
    int nb_line_rejected_tDBSCD_1 = 0;
    String tableName_tDBSCD_1 = null;
	String dbschema_tDBSCD_1 = null;
java.sql.Connection conn_tDBSCD_1 = null;
String dbUser_tDBSCD_1 = null;
	dbschema_tDBSCD_1 = (String)globalMap.get("dbschema_tDBConnection_2");
	
	conn_tDBSCD_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	

    if(dbschema_tDBSCD_1 == null || dbschema_tDBSCD_1.trim().length() == 0) {
        tableName_tDBSCD_1 = "DimProducto";
    } else {
        tableName_tDBSCD_1 = dbschema_tDBSCD_1 + "].[" + "DimProducto";
    }
	org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBSCD_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();	
    String tmpValue_tDBSCD_1 = null;    
        String search_tDBSCD_1 = "SELECT [ProductoID], [TamanoProducto], [NumeroProducto], [ClaseProducto], [ColorProducto], [LineaProducto], [CostoEstandar], [scd_version] FROM [" + tableName_tDBSCD_1 + "] WHERE [fecha_fin] IS NULL";
        java.sql.Statement statement_tDBSCD_1 = conn_tDBSCD_1.createStatement();
        java.sql.ResultSet resultSet_tDBSCD_1 = statement_tDBSCD_1.executeQuery(search_tDBSCD_1);
        java.util.Map<SCDSK_tDBSCD_1, SCDStruct_tDBSCD_1> cache_tDBSCD_1 = new java.util.HashMap<SCDSK_tDBSCD_1, SCDStruct_tDBSCD_1>();
        while(resultSet_tDBSCD_1.next()) {
            SCDSK_tDBSCD_1 sk_tDBSCD_1 = new SCDSK_tDBSCD_1();
            SCDStruct_tDBSCD_1 row_tDBSCD_1 = new SCDStruct_tDBSCD_1();
                    if(resultSet_tDBSCD_1.getObject(1) != null) {
                        sk_tDBSCD_1.ProductoID = resultSet_tDBSCD_1.getInt(1);
                    }
                    if(resultSet_tDBSCD_1.getObject(2) != null) {
                        row_tDBSCD_1.TamanoProducto = resultSet_tDBSCD_1.getString(2);
                    }
                    if(resultSet_tDBSCD_1.getObject(3) != null) {
                        row_tDBSCD_1.NumeroProducto = resultSet_tDBSCD_1.getString(3);
                    }
                    if(resultSet_tDBSCD_1.getObject(4) != null) {
                        row_tDBSCD_1.ClaseProducto = resultSet_tDBSCD_1.getString(4);
                    }
                    if(resultSet_tDBSCD_1.getObject(5) != null) {
                        row_tDBSCD_1.ColorProducto = resultSet_tDBSCD_1.getString(5);
                    }
                    if(resultSet_tDBSCD_1.getObject(6) != null) {
                        row_tDBSCD_1.LineaProducto = resultSet_tDBSCD_1.getString(6);
                    }
                    if(resultSet_tDBSCD_1.getObject(7) != null) {
                        row_tDBSCD_1.CostoEstandar = resultSet_tDBSCD_1.getObject(7);
                    }
                    if(resultSet_tDBSCD_1.getObject(8) != null) {
                        row_tDBSCD_1.scd_version = resultSet_tDBSCD_1.getInt(8);
                    }
            cache_tDBSCD_1.put(sk_tDBSCD_1, row_tDBSCD_1);
        }
        resultSet_tDBSCD_1.close();
        statement_tDBSCD_1.close();
    String insertionSQL_tDBSCD_1 = "INSERT INTO [" + tableName_tDBSCD_1 + "]([ProductoID], [TamanoProducto], [NumeroProducto], [ClaseProducto], [ColorProducto], [LineaProducto], [CostoEstandar], [scd_activo], [scd_version], [fecha_inicio], [fecha_fin]) VALUES(?, ?, ?, ?, ?, ?, ?, 1, ?, ?, ?)";
    java.sql.PreparedStatement insertionStatement_tDBSCD_1 = conn_tDBSCD_1.prepareStatement(insertionSQL_tDBSCD_1);
            insertionStatement_tDBSCD_1.setTimestamp(9, new java.sql.Timestamp(start_Hash.get("tDBSCD_1")));
            insertionStatement_tDBSCD_1.setNull(10, java.sql.Types.DATE);
        String updateSQLForType1_tDBSCD_1 = "UPDATE [" + tableName_tDBSCD_1 + "] SET [TamanoProducto] = ?, [NumeroProducto] = ?, [ClaseProducto] = ?, [ColorProducto] = ?, [LineaProducto] = ? WHERE [ProductoID] = ?";
        java.sql.PreparedStatement updateForType1_tDBSCD_1 = conn_tDBSCD_1.prepareStatement(updateSQLForType1_tDBSCD_1);        
        String updateSQLForType2_tDBSCD_1 = "UPDATE [" + tableName_tDBSCD_1 + "] SET [fecha_fin] = ?, [scd_activo] = 0 WHERE [ProductoID] = ? AND [fecha_fin] IS NULL";
        java.sql.PreparedStatement updateForType2_tDBSCD_1 = conn_tDBSCD_1.prepareStatement(updateSQLForType2_tDBSCD_1);
            updateForType2_tDBSCD_1.setTimestamp(1, new java.sql.Timestamp(start_Hash.get("tDBSCD_1")));
    
        SCDSK_tDBSCD_1 lookUpKey_tDBSCD_1 = null;        
    SCDStruct_tDBSCD_1 lookUpValue_tDBSCD_1 = null;

 



/**
 * [tDBSCD_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_1 = new StringBuilder();
                    log4jParamters_tDBInput_1.append("Parameters:");
                            log4jParamters_tDBInput_1.append("USE_EXISTING_CONNECTION" + " = " + "true");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("CONNECTION" + " = " + "tDBConnection_1");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TABLE" + " = " + "\"\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERY" + " = " + "\"select p.ProductID as ProductoID,   p.ProductNumber as NumeroProducto,  isnull(p.Color,'No Definido') as ColorProducto,   isnull(convert(nvarchar(15),p.Size),'No Definido') as TamanoProducto,  isnull(convert(nvarchar(15),p.ProductLine),'No Definido') as LineaProducto,   isnull(convert(nvarchar(15),p.Class),'No Definido') as ClaseProducto,  p.StandardCost as CostoEstandar  from Production.Product p\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("ProductoID")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("NumeroProducto")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ColorProducto")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("TamanoProducto")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("LineaProducto")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("ClaseProducto")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("CostoEstandar")+"}]");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("UNIFIED_COMPONENTS" + " = " + "tMSSqlInput");
                        log4jParamters_tDBInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + (log4jParamters_tDBInput_1) );
                    } 
                } 
            new BytesLimit65535_tDBInput_1().limitLog4jByte();
            }
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
				if(conn_tDBInput_1 != null) {
					if(conn_tDBInput_1.getMetaData() != null) {
						
							log.debug("tDBInput_1 - Uses an existing connection with username '" + conn_tDBInput_1.getMetaData().getUserName() + "'. Connection URL: " + conn_tDBInput_1.getMetaData().getURL() + ".");
						
					}
				}
			
			String dbschema_tDBInput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select p.ProductID as ProductoID, \np.ProductNumber as NumeroProducto,\nisnull(p.Color,'No Definido') as ColorProducto,"
+" \nisnull(convert(nvarchar(15),p.Size),'No Definido') as TamanoProducto,\nisnull(convert(nvarchar(15),p.ProductLine),'No"
+" Definido') as LineaProducto, \nisnull(convert(nvarchar(15),p.Class),'No Definido') as ClaseProducto,\np.StandardCost as"
+" CostoEstandar\nfrom Production.Product p";
		    
	    		log.debug("tDBInput_1 - Executing the query: '" + dbquery_tDBInput_1 + "'.");
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    	log.debug("tDBInput_1 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.ProductoID = 0;
							} else {
		                          
            row1.ProductoID = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.NumeroProducto = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.NumeroProducto = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.NumeroProducto = tmpContent_tDBInput_1;
                }
            } else {
                row1.NumeroProducto = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.ColorProducto = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ColorProducto = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.ColorProducto = tmpContent_tDBInput_1;
                }
            } else {
                row1.ColorProducto = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.TamanoProducto = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.TamanoProducto = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.TamanoProducto = tmpContent_tDBInput_1;
                }
            } else {
                row1.TamanoProducto = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.LineaProducto = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.LineaProducto = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.LineaProducto = tmpContent_tDBInput_1;
                }
            } else {
                row1.LineaProducto = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.ClaseProducto = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ClaseProducto = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.ClaseProducto = tmpContent_tDBInput_1;
                }
            } else {
                row1.ClaseProducto = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.CostoEstandar = null;
							} else {
		                          
            row1.CostoEstandar = rs_tDBInput_1.getObject(7);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					
						log.debug("tDBInput_1 - Retrieving the record " + nb_line_tDBInput_1 + ".");
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBSCD_1 main ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row1 - " + (row1==null? "": row1.toLogString()));
    			}
    		

	try {
        lookUpKey_tDBSCD_1 = new SCDSK_tDBSCD_1();
            lookUpKey_tDBSCD_1.ProductoID = row1.ProductoID;
        lookUpKey_tDBSCD_1.hashCodeDirty = true;
        lookUpValue_tDBSCD_1 = cache_tDBSCD_1.get(lookUpKey_tDBSCD_1);    
    if(lookUpValue_tDBSCD_1 == null) {
            lookUpValue_tDBSCD_1 = new SCDStruct_tDBSCD_1();
                lookUpValue_tDBSCD_1.scd_version = 1;
        
                    insertionStatement_tDBSCD_1.setInt(1, row1.ProductoID);

                    if(row1.TamanoProducto == null) {
insertionStatement_tDBSCD_1.setNull(2, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(2, row1.TamanoProducto);
}

                    if(row1.NumeroProducto == null) {
insertionStatement_tDBSCD_1.setNull(3, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(3, row1.NumeroProducto);
}

                    if(row1.ClaseProducto == null) {
insertionStatement_tDBSCD_1.setNull(4, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(4, row1.ClaseProducto);
}

                    if(row1.ColorProducto == null) {
insertionStatement_tDBSCD_1.setNull(5, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(5, row1.ColorProducto);
}

                    if(row1.LineaProducto == null) {
insertionStatement_tDBSCD_1.setNull(6, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(6, row1.LineaProducto);
}

                    if(row1.CostoEstandar == null) {
insertionStatement_tDBSCD_1.setNull(7, java.sql.Types.OTHER);
} else {
insertionStatement_tDBSCD_1.setObject(7, row1.CostoEstandar);
}

                int version_tDBSCD_1 = 1;
                insertionStatement_tDBSCD_1.setInt(8, version_tDBSCD_1);

        nb_line_inserted_tDBSCD_1 += insertionStatement_tDBSCD_1.executeUpdate();
    } else {
            if((lookUpValue_tDBSCD_1.TamanoProducto == null && row1.TamanoProducto!= null) || (lookUpValue_tDBSCD_1.TamanoProducto != null && !lookUpValue_tDBSCD_1.TamanoProducto.equals(row1.TamanoProducto)) || (lookUpValue_tDBSCD_1.NumeroProducto == null && row1.NumeroProducto!= null) || (lookUpValue_tDBSCD_1.NumeroProducto != null && !lookUpValue_tDBSCD_1.NumeroProducto.equals(row1.NumeroProducto)) || (lookUpValue_tDBSCD_1.ClaseProducto == null && row1.ClaseProducto!= null) || (lookUpValue_tDBSCD_1.ClaseProducto != null && !lookUpValue_tDBSCD_1.ClaseProducto.equals(row1.ClaseProducto)) || (lookUpValue_tDBSCD_1.ColorProducto == null && row1.ColorProducto!= null) || (lookUpValue_tDBSCD_1.ColorProducto != null && !lookUpValue_tDBSCD_1.ColorProducto.equals(row1.ColorProducto)) || (lookUpValue_tDBSCD_1.LineaProducto == null && row1.LineaProducto!= null) || (lookUpValue_tDBSCD_1.LineaProducto != null && !lookUpValue_tDBSCD_1.LineaProducto.equals(row1.LineaProducto))) {
                    if(row1.TamanoProducto == null) {
updateForType1_tDBSCD_1.setNull(1, java.sql.Types.VARCHAR);
} else {
updateForType1_tDBSCD_1.setString(1, row1.TamanoProducto);
}

                    if(row1.NumeroProducto == null) {
updateForType1_tDBSCD_1.setNull(2, java.sql.Types.VARCHAR);
} else {
updateForType1_tDBSCD_1.setString(2, row1.NumeroProducto);
}

                    if(row1.ClaseProducto == null) {
updateForType1_tDBSCD_1.setNull(3, java.sql.Types.VARCHAR);
} else {
updateForType1_tDBSCD_1.setString(3, row1.ClaseProducto);
}

                    if(row1.ColorProducto == null) {
updateForType1_tDBSCD_1.setNull(4, java.sql.Types.VARCHAR);
} else {
updateForType1_tDBSCD_1.setString(4, row1.ColorProducto);
}

                    if(row1.LineaProducto == null) {
updateForType1_tDBSCD_1.setNull(5, java.sql.Types.VARCHAR);
} else {
updateForType1_tDBSCD_1.setString(5, row1.LineaProducto);
}

                    updateForType1_tDBSCD_1.setInt(6, row1.ProductoID);

                nb_line_update_tDBSCD_1 += updateForType1_tDBSCD_1.executeUpdate();
            }
            if((lookUpValue_tDBSCD_1.CostoEstandar == null && row1.CostoEstandar!= null) || (lookUpValue_tDBSCD_1.CostoEstandar != null && !lookUpValue_tDBSCD_1.CostoEstandar.equals(row1.CostoEstandar))) {
                    updateForType2_tDBSCD_1.setInt(2, row1.ProductoID);

                nb_line_update_tDBSCD_1 += updateForType2_tDBSCD_1.executeUpdate();
                            insertionStatement_tDBSCD_1.setInt(1, row1.ProductoID);

                            if(row1.TamanoProducto == null) {
insertionStatement_tDBSCD_1.setNull(2, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(2, row1.TamanoProducto);
}

                            if(row1.NumeroProducto == null) {
insertionStatement_tDBSCD_1.setNull(3, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(3, row1.NumeroProducto);
}

                            if(row1.ClaseProducto == null) {
insertionStatement_tDBSCD_1.setNull(4, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(4, row1.ClaseProducto);
}

                            if(row1.ColorProducto == null) {
insertionStatement_tDBSCD_1.setNull(5, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(5, row1.ColorProducto);
}

                            if(row1.LineaProducto == null) {
insertionStatement_tDBSCD_1.setNull(6, java.sql.Types.VARCHAR);
} else {
insertionStatement_tDBSCD_1.setString(6, row1.LineaProducto);
}

                            if(row1.CostoEstandar == null) {
insertionStatement_tDBSCD_1.setNull(7, java.sql.Types.OTHER);
} else {
insertionStatement_tDBSCD_1.setObject(7, row1.CostoEstandar);
}

                        int maxVersion_tDBSCD_1 = lookUpValue_tDBSCD_1.scd_version + 1;
                            lookUpValue_tDBSCD_1.scd_version = lookUpValue_tDBSCD_1.scd_version + 1;                            
                        insertionStatement_tDBSCD_1.setInt(8, maxVersion_tDBSCD_1);

                nb_line_inserted_tDBSCD_1 += insertionStatement_tDBSCD_1.executeUpdate();
            }
    }
    
	} catch (java.lang.Exception e) {//catch
globalMap.put("tDBSCD_1_ERROR_MESSAGE",e.getMessage());
  		
            throw(e);
	}//end catch
	
                lookUpValue_tDBSCD_1.TamanoProducto = row1.TamanoProducto;
                lookUpValue_tDBSCD_1.NumeroProducto = row1.NumeroProducto;
                lookUpValue_tDBSCD_1.ClaseProducto = row1.ClaseProducto;
                lookUpValue_tDBSCD_1.ColorProducto = row1.ColorProducto;
                lookUpValue_tDBSCD_1.LineaProducto = row1.LineaProducto;
                lookUpValue_tDBSCD_1.CostoEstandar = row1.CostoEstandar;
        cache_tDBSCD_1.put(lookUpKey_tDBSCD_1, lookUpValue_tDBSCD_1);


 


	tos_count_tDBSCD_1++;

/**
 * [tDBSCD_1 main ] stop
 */
	
	/**
	 * [tDBSCD_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

 



/**
 * [tDBSCD_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBSCD_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

 



/**
 * [tDBSCD_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
	    		log.debug("tDBInput_1 - Retrieved records count: "+nb_line_tDBInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Done.") );

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tDBSCD_1 end ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

    insertionStatement_tDBSCD_1.close();
        updateForType1_tDBSCD_1.close();
        updateForType2_tDBSCD_1.close();
    
    
    globalMap.put("tDBSCD_1_NB_LINE_UPDATED", nb_line_update_tDBSCD_1);
    globalMap.put("tDBSCD_1_NB_LINE_INSERTED", nb_line_inserted_tDBSCD_1);
    globalMap.put("tDBSCD_1_NB_LINE_REJECTED",nb_line_rejected_tDBSCD_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tDBSCD_1", true);
end_Hash.put("tDBSCD_1", System.currentTimeMillis());




/**
 * [tDBSCD_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tDBSCD_1 finally ] start
	 */

	

	
	
	currentComponent="tDBSCD_1";

	

 



/**
 * [tDBSCD_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void connectionStatsLogs_CommitProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [connectionStatsLogs_Commit begin ] start
	 */

	

	
		
		ok_Hash.put("connectionStatsLogs_Commit", false);
		start_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());
		
	
	currentComponent="connectionStatsLogs_Commit";

	
		int tos_count_connectionStatsLogs_Commit = 0;
		
                if(log.isDebugEnabled())
            log.debug("connectionStatsLogs_Commit - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_connectionStatsLogs_Commit{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_connectionStatsLogs_Commit = new StringBuilder();
                    log4jParamters_connectionStatsLogs_Commit.append("Parameters:");
                            log4jParamters_connectionStatsLogs_Commit.append("CONNECTION" + " = " + "connectionStatsLogs");
                        log4jParamters_connectionStatsLogs_Commit.append(" | ");
                            log4jParamters_connectionStatsLogs_Commit.append("CLOSE" + " = " + "false");
                        log4jParamters_connectionStatsLogs_Commit.append(" | ");
                if(log.isDebugEnabled())
            log.debug("connectionStatsLogs_Commit - "  + (log4jParamters_connectionStatsLogs_Commit) );
                    } 
                } 
            new BytesLimit65535_connectionStatsLogs_Commit().limitLog4jByte();
            }

 



/**
 * [connectionStatsLogs_Commit begin ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit main ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

	java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection)globalMap.get("conn_connectionStatsLogs");
	if(conn_connectionStatsLogs_Commit != null && !conn_connectionStatsLogs_Commit.isClosed())
	{
	
			
	    		log.debug("connectionStatsLogs_Commit - Connection 'connectionStatsLogs' starting to commit.");
			
			conn_connectionStatsLogs_Commit.commit();
			
	    		log.debug("connectionStatsLogs_Commit - Connection 'connectionStatsLogs' commit has succeeded.");
			
	
	}

 


	tos_count_connectionStatsLogs_Commit++;

/**
 * [connectionStatsLogs_Commit main ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit process_data_begin ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit process_data_begin ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit process_data_end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit process_data_end ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 
                if(log.isDebugEnabled())
            log.debug("connectionStatsLogs_Commit - "  + ("Done.") );

ok_Hash.put("connectionStatsLogs_Commit", true);
end_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());




/**
 * [connectionStatsLogs_Commit end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [connectionStatsLogs_Commit finally ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}
	

public void connectionStatsLogsProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [connectionStatsLogs begin ] start
	 */

	

	
		
		ok_Hash.put("connectionStatsLogs", false);
		start_Hash.put("connectionStatsLogs", System.currentTimeMillis());
		
	
	currentComponent="connectionStatsLogs";

	
		int tos_count_connectionStatsLogs = 0;
		
                if(log.isDebugEnabled())
            log.debug("connectionStatsLogs - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_connectionStatsLogs{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_connectionStatsLogs = new StringBuilder();
                    log4jParamters_connectionStatsLogs.append("Parameters:");
                            log4jParamters_connectionStatsLogs.append("DRIVER" + " = " + "MSSQL_PROP");
                        log4jParamters_connectionStatsLogs.append(" | ");
                            log4jParamters_connectionStatsLogs.append("HOST" + " = " + "context.Desarrollo_Datawarehouse_Server");
                        log4jParamters_connectionStatsLogs.append(" | ");
                            log4jParamters_connectionStatsLogs.append("PORT" + " = " + "context.Desarrollo_Datawarehouse_Port");
                        log4jParamters_connectionStatsLogs.append(" | ");
                            log4jParamters_connectionStatsLogs.append("SCHEMA_DB" + " = " + "context.Desarrollo_Datawarehouse_Schema");
                        log4jParamters_connectionStatsLogs.append(" | ");
                            log4jParamters_connectionStatsLogs.append("DBNAME" + " = " + "context.Desarrollo_Datawarehouse_Database");
                        log4jParamters_connectionStatsLogs.append(" | ");
                            log4jParamters_connectionStatsLogs.append("USER" + " = " + "context.Desarrollo_Datawarehouse_Login");
                        log4jParamters_connectionStatsLogs.append(" | ");
                            log4jParamters_connectionStatsLogs.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.Desarrollo_Datawarehouse_Password)).substring(0, 4) + "...");     
                        log4jParamters_connectionStatsLogs.append(" | ");
                            log4jParamters_connectionStatsLogs.append("PROPERTIES" + " = " + "context.Desarrollo_Datawarehouse_AdditionalParams");
                        log4jParamters_connectionStatsLogs.append(" | ");
                            log4jParamters_connectionStatsLogs.append("USE_SHARED_CONNECTION" + " = " + "true");
                        log4jParamters_connectionStatsLogs.append(" | ");
                            log4jParamters_connectionStatsLogs.append("SHARED_CONNECTION_NAME" + " = " + "\"StatsAndLog_Shared_Connection\"");
                        log4jParamters_connectionStatsLogs.append(" | ");
                            log4jParamters_connectionStatsLogs.append("ACTIVE_DIR_AUTH" + " = " + "false");
                        log4jParamters_connectionStatsLogs.append(" | ");
                            log4jParamters_connectionStatsLogs.append("AUTO_COMMIT" + " = " + "false");
                        log4jParamters_connectionStatsLogs.append(" | ");
                            log4jParamters_connectionStatsLogs.append("SHARE_IDENTITY_SETTING" + " = " + "false");
                        log4jParamters_connectionStatsLogs.append(" | ");
                if(log.isDebugEnabled())
            log.debug("connectionStatsLogs - "  + (log4jParamters_connectionStatsLogs) );
                    } 
                } 
            new BytesLimit65535_connectionStatsLogs().limitLog4jByte();
            }
	

			    
		    String url_connectionStatsLogs = "jdbc:sqlserver://" + context.Desarrollo_Datawarehouse_Server ;
		String port_connectionStatsLogs = context.Desarrollo_Datawarehouse_Port;
		String dbname_connectionStatsLogs = context.Desarrollo_Datawarehouse_Database ;
    	if (!"".equals(port_connectionStatsLogs)) {
    		url_connectionStatsLogs += ":" + context.Desarrollo_Datawarehouse_Port;
    	}
    	if (!"".equals(dbname_connectionStatsLogs)) {
    				    
		    	url_connectionStatsLogs += ";databaseName=" + context.Desarrollo_Datawarehouse_Database; 
    	}

		url_connectionStatsLogs += ";appName=" + projectName + ";" + context.Desarrollo_Datawarehouse_AdditionalParams;  
	String dbUser_connectionStatsLogs = context.Desarrollo_Datawarehouse_Login;
	
	
		
	final String decryptedPassword_connectionStatsLogs = context.Desarrollo_Datawarehouse_Password; 
		String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;
	
	
	java.sql.Connection conn_connectionStatsLogs = null;
	
	
			SharedDBConnectionLog4j.initLogger(log.getName(),"connectionStatsLogs");
			String sharedConnectionName_connectionStatsLogs = "StatsAndLog_Shared_Connection";
			conn_connectionStatsLogs = SharedDBConnectionLog4j.getDBConnection("com.microsoft.sqlserver.jdbc.SQLServerDriver",url_connectionStatsLogs,dbUser_connectionStatsLogs , dbPwd_connectionStatsLogs , sharedConnectionName_connectionStatsLogs);
			globalMap.put("conn_connectionStatsLogs", conn_connectionStatsLogs);
	if (null != conn_connectionStatsLogs) {
		
			log.debug("connectionStatsLogs - Connection is set auto commit to 'false'.");
			conn_connectionStatsLogs.setAutoCommit(false);
	}

	globalMap.put("dbschema_connectionStatsLogs", context.Desarrollo_Datawarehouse_Schema);

	globalMap.put("db_connectionStatsLogs",  context.Desarrollo_Datawarehouse_Database);
	
	globalMap.put("shareIdentitySetting_connectionStatsLogs",  false);

	globalMap.put("driver_connectionStatsLogs", "MSSQL_PROP");

 



/**
 * [connectionStatsLogs begin ] stop
 */
	
	/**
	 * [connectionStatsLogs main ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 


	tos_count_connectionStatsLogs++;

/**
 * [connectionStatsLogs main ] stop
 */
	
	/**
	 * [connectionStatsLogs process_data_begin ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs process_data_begin ] stop
 */
	
	/**
	 * [connectionStatsLogs process_data_end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs process_data_end ] stop
 */
	
	/**
	 * [connectionStatsLogs end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 
                if(log.isDebugEnabled())
            log.debug("connectionStatsLogs - "  + ("Done.") );

ok_Hash.put("connectionStatsLogs", true);
end_Hash.put("connectionStatsLogs", System.currentTimeMillis());




/**
 * [connectionStatsLogs end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [connectionStatsLogs finally ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendStats_STATSStruct implements routines.system.IPersistableRow<row_talendStats_STATSStruct> {
    final static byte[] commonByteArrayLock_IMPORTARDATOSCSVABD_DimProducto = new byte[0];
    static byte[] commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length) {
				if(length < 1024 && commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length == 0) {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[1024];
				} else {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length);
			strReturn = new String(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length) {
				if(length < 1024 && commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length == 0) {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[1024];
				} else {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length);
			strReturn = new String(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTARDATOSCSVABD_DimProducto) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_IMPORTARDATOSCSVABD_DimProducto) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message_type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message_type);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(duration == null){
        					sb.append("<null>");
        				}else{
            				sb.append(duration);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row_talendStats_STATSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendStats_STATSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendStats_STATSStruct row_talendStats_STATS = new row_talendStats_STATSStruct();




	
	/**
	 * [talendStats_DB begin ] start
	 */

	

	
		
		ok_Hash.put("talendStats_DB", false);
		start_Hash.put("talendStats_DB", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendStats_DB";
	
	currentComponent="talendStats_DB";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendStats_DB = 0;
		
                if(log.isDebugEnabled())
            log.debug("talendStats_DB - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_talendStats_DB{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_talendStats_DB = new StringBuilder();
                    log4jParamters_talendStats_DB.append("Parameters:");
                            log4jParamters_talendStats_DB.append("USE_EXISTING_CONNECTION" + " = " + "true");
                        log4jParamters_talendStats_DB.append(" | ");
                            log4jParamters_talendStats_DB.append("CONNECTION" + " = " + "connectionStatsLogs");
                        log4jParamters_talendStats_DB.append(" | ");
                            log4jParamters_talendStats_DB.append("TABLE" + " = " + "\"Estadisticas\"");
                        log4jParamters_talendStats_DB.append(" | ");
                            log4jParamters_talendStats_DB.append("TABLE_ACTION" + " = " + "CREATE_IF_NOT_EXISTS");
                        log4jParamters_talendStats_DB.append(" | ");
                            log4jParamters_talendStats_DB.append("IDENTITY_INSERT" + " = " + "false");
                        log4jParamters_talendStats_DB.append(" | ");
                            log4jParamters_talendStats_DB.append("DATA_ACTION" + " = " + "INSERT");
                        log4jParamters_talendStats_DB.append(" | ");
                            log4jParamters_talendStats_DB.append("SPECIFY_IDENTITY_FIELD" + " = " + "false");
                        log4jParamters_talendStats_DB.append(" | ");
                            log4jParamters_talendStats_DB.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_talendStats_DB.append(" | ");
                            log4jParamters_talendStats_DB.append("USE_ALTERNATE_SCHEMA" + " = " + "false");
                        log4jParamters_talendStats_DB.append(" | ");
                            log4jParamters_talendStats_DB.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_talendStats_DB.append(" | ");
                            log4jParamters_talendStats_DB.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_talendStats_DB.append(" | ");
                            log4jParamters_talendStats_DB.append("IGNORE_DATE_OUTOF_RANGE" + " = " + "false");
                        log4jParamters_talendStats_DB.append(" | ");
                            log4jParamters_talendStats_DB.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_talendStats_DB.append(" | ");
                            log4jParamters_talendStats_DB.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_talendStats_DB.append(" | ");
                            log4jParamters_talendStats_DB.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_talendStats_DB.append(" | ");
                            log4jParamters_talendStats_DB.append("BATCH_SIZE" + " = " + "10000");
                        log4jParamters_talendStats_DB.append(" | ");
                if(log.isDebugEnabled())
            log.debug("talendStats_DB - "  + (log4jParamters_talendStats_DB) );
                    } 
                } 
            new BytesLimit65535_talendStats_DB().limitLog4jByte();
            }



int nb_line_talendStats_DB = 0;
int nb_line_update_talendStats_DB = 0;
int nb_line_inserted_talendStats_DB = 0;
int nb_line_deleted_talendStats_DB = 0;
int nb_line_rejected_talendStats_DB = 0;

int deletedCount_talendStats_DB=0;
int updatedCount_talendStats_DB=0;
int insertedCount_talendStats_DB=0;
int rowsToCommitCount_talendStats_DB=0;
int rejectedCount_talendStats_DB=0;
String dbschema_talendStats_DB = null;
String tableName_talendStats_DB = null;
boolean whetherReject_talendStats_DB = false;

java.util.Calendar calendar_talendStats_DB = java.util.Calendar.getInstance();
long year1_talendStats_DB = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_talendStats_DB = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_talendStats_DB = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_talendStats_DB;

java.util.Calendar calendar_datetimeoffset_talendStats_DB = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



	
java.sql.Connection conn_talendStats_DB = null;
String dbUser_talendStats_DB = null;
	dbschema_talendStats_DB = (String)globalMap.get("dbschema_connectionStatsLogs");
	
	conn_talendStats_DB = (java.sql.Connection)globalMap.get("conn_connectionStatsLogs");
	
                if(log.isDebugEnabled())
            log.debug("talendStats_DB - "  + ("Uses an existing connection with username '")  + (conn_talendStats_DB.getMetaData().getUserName())  + ("'. Connection URL: ")  + (conn_talendStats_DB.getMetaData().getURL())  + (".") );
                if(log.isDebugEnabled())
            log.debug("talendStats_DB - "  + ("Connection is set auto commit to '")  + (conn_talendStats_DB.getAutoCommit())  + ("'.") );
   int batchSize_talendStats_DB = 10000;
   int batchSizeCounter_talendStats_DB=0;

if(dbschema_talendStats_DB == null || dbschema_talendStats_DB.trim().length() == 0) {
    tableName_talendStats_DB = "Estadisticas";
} else {
    tableName_talendStats_DB = dbschema_talendStats_DB + "].[" + "Estadisticas";
}
	int count_talendStats_DB=0;


                    // [%connection%][checktable][tableName]
                    String keyCheckTable_talendStats_DB = conn_talendStats_DB + "[checktable]" + "[" + "Estadisticas" + "]";

                if(GlobalResource.resourceMap.get(keyCheckTable_talendStats_DB)== null){//}

                    synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_talendStats_DB)) {//}
                        if(GlobalResource.resourceMap.get(keyCheckTable_talendStats_DB)== null){//}
                                boolean whetherExist_talendStats_DB = false;
                                try (java.sql.Statement isExistStmt_talendStats_DB = conn_talendStats_DB.createStatement()) {
                                    try {
                                        isExistStmt_talendStats_DB.execute("SELECT TOP 1 1 FROM [" + tableName_talendStats_DB + "]" );
                                        whetherExist_talendStats_DB = true;
                                    } catch (java.lang.Exception e){
globalMap.put("talendStats_DB_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_talendStats_DB = false;
                                    }
                                }
                                if(!whetherExist_talendStats_DB) {
                                    try (java.sql.Statement stmtCreate_talendStats_DB = conn_talendStats_DB.createStatement()) {
                if(log.isDebugEnabled())
            log.debug("talendStats_DB - "  + ("Creating")  + (" table '")  + ("[" +tableName_talendStats_DB + "]")  + ("'.") );
                                        stmtCreate_talendStats_DB.execute("CREATE TABLE [" + tableName_talendStats_DB + "]([moment] DATETIME ,[pid] VARCHAR(20)  ,[father_pid] VARCHAR(20)  ,[root_pid] VARCHAR(20)  ,[system_pid] BIGINT ,[project] VARCHAR(50)  ,[job] VARCHAR(255)  ,[job_repository_id] VARCHAR(255)  ,[job_version] VARCHAR(255)  ,[context] VARCHAR(50)  ,[origin] VARCHAR(255)  ,[message_type] VARCHAR(255)  ,[message] VARCHAR(255)  ,[duration] BIGINT )");
                if(log.isDebugEnabled())
            log.debug("talendStats_DB - "  + ("Create")  + (" table '")  + ("[" +tableName_talendStats_DB + "]")  + ("' has succeeded.") );
                                    }
                                }
                            GlobalResource.resourceMap.put(keyCheckTable_talendStats_DB, true);
            //{{{
                        } // end of if
                    } // end synchronized
                }
        String insert_talendStats_DB = "INSERT INTO [" + tableName_talendStats_DB + "] ([moment],[pid],[father_pid],[root_pid],[system_pid],[project],[job],[job_repository_id],[job_version],[context],[origin],[message_type],[message],[duration]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

        java.sql.PreparedStatement pstmt_talendStats_DB = null;
        String keyPsmt_talendStats_DB = conn_talendStats_DB + "[psmt]" + "[" + "Estadisticas" + "]";
        pstmt_talendStats_DB = SharedDBPreparedStatement.getSharedPreparedStatement(conn_talendStats_DB,insert_talendStats_DB,keyPsmt_talendStats_DB);
        resourceMap.put("pstmt_talendStats_DB", pstmt_talendStats_DB);
 	boolean isShareIdentity_talendStats_DB = globalMap.get("shareIdentitySetting_connectionStatsLogs") != null && (Boolean)globalMap.get("shareIdentitySetting_connectionStatsLogs") == true;

 



/**
 * [talendStats_DB begin ] stop
 */



	
	/**
	 * [talendStats_STATS begin ] start
	 */

	

	
		
		ok_Hash.put("talendStats_STATS", false);
		start_Hash.put("talendStats_STATS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	
		int tos_count_talendStats_STATS = 0;
		
                if(log.isDebugEnabled())
            log.debug("talendStats_STATS - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_talendStats_STATS{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_talendStats_STATS = new StringBuilder();
                    log4jParamters_talendStats_STATS.append("Parameters:");
                if(log.isDebugEnabled())
            log.debug("talendStats_STATS - "  + (log4jParamters_talendStats_STATS) );
                    } 
                } 
            new BytesLimit65535_talendStats_STATS().limitLog4jByte();
            }

	for (StatCatcherUtils.StatCatcherMessage scm : talendStats_STATS.getMessages()) {
		row_talendStats_STATS.pid = pid;
		row_talendStats_STATS.root_pid = rootPid;
		row_talendStats_STATS.father_pid = fatherPid;	
    	row_talendStats_STATS.project = projectName;
    	row_talendStats_STATS.job = jobName;
    	row_talendStats_STATS.context = contextStr;
		row_talendStats_STATS.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row_talendStats_STATS.message = scm.getMessage();
		row_talendStats_STATS.duration = scm.getDuration();
		row_talendStats_STATS.moment = scm.getMoment();
		row_talendStats_STATS.message_type = scm.getMessageType();
		row_talendStats_STATS.job_version = scm.getJobVersion();
		row_talendStats_STATS.job_repository_id = scm.getJobId();
		row_talendStats_STATS.system_pid = scm.getSystemPid();

 



/**
 * [talendStats_STATS begin ] stop
 */
	
	/**
	 * [talendStats_STATS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 


	tos_count_talendStats_STATS++;

/**
 * [talendStats_STATS main ] stop
 */
	
	/**
	 * [talendStats_STATS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS process_data_begin ] stop
 */

	
	/**
	 * [talendStats_DB main ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_DB";
	
	currentComponent="talendStats_DB";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main"
						
						);
					}
					



        whetherReject_talendStats_DB = false;
                    if(row_talendStats_STATS.moment != null) {
pstmt_talendStats_DB.setTimestamp(1, new java.sql.Timestamp(row_talendStats_STATS.moment.getTime()));
} else {
pstmt_talendStats_DB.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(row_talendStats_STATS.pid == null) {
pstmt_talendStats_DB.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_talendStats_DB.setString(2, row_talendStats_STATS.pid);
}

                    if(row_talendStats_STATS.father_pid == null) {
pstmt_talendStats_DB.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_talendStats_DB.setString(3, row_talendStats_STATS.father_pid);
}

                    if(row_talendStats_STATS.root_pid == null) {
pstmt_talendStats_DB.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_talendStats_DB.setString(4, row_talendStats_STATS.root_pid);
}

                    if(row_talendStats_STATS.system_pid == null) {
pstmt_talendStats_DB.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_talendStats_DB.setLong(5, row_talendStats_STATS.system_pid);
}

                    if(row_talendStats_STATS.project == null) {
pstmt_talendStats_DB.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_talendStats_DB.setString(6, row_talendStats_STATS.project);
}

                    if(row_talendStats_STATS.job == null) {
pstmt_talendStats_DB.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_talendStats_DB.setString(7, row_talendStats_STATS.job);
}

                    if(row_talendStats_STATS.job_repository_id == null) {
pstmt_talendStats_DB.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_talendStats_DB.setString(8, row_talendStats_STATS.job_repository_id);
}

                    if(row_talendStats_STATS.job_version == null) {
pstmt_talendStats_DB.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_talendStats_DB.setString(9, row_talendStats_STATS.job_version);
}

                    if(row_talendStats_STATS.context == null) {
pstmt_talendStats_DB.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_talendStats_DB.setString(10, row_talendStats_STATS.context);
}

                    if(row_talendStats_STATS.origin == null) {
pstmt_talendStats_DB.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_talendStats_DB.setString(11, row_talendStats_STATS.origin);
}

                    if(row_talendStats_STATS.message_type == null) {
pstmt_talendStats_DB.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_talendStats_DB.setString(12, row_talendStats_STATS.message_type);
}

                    if(row_talendStats_STATS.message == null) {
pstmt_talendStats_DB.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_talendStats_DB.setString(13, row_talendStats_STATS.message);
}

                    if(row_talendStats_STATS.duration == null) {
pstmt_talendStats_DB.setNull(14, java.sql.Types.INTEGER);
} else {pstmt_talendStats_DB.setLong(14, row_talendStats_STATS.duration);
}


        		pstmt_talendStats_DB.addBatch();
        		nb_line_talendStats_DB++;
        		
    		 
                if(log.isDebugEnabled())
            log.debug("talendStats_DB - "  + ("Adding the record ")  + (nb_line_talendStats_DB)  + (" to the ")  + ("INSERT")  + (" batch.") );
    		  batchSizeCounter_talendStats_DB++;
    		
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_talendStats_DB{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_talendStats_DB) throws Exception {
                try {
						
                if(log.isDebugEnabled())
            log.debug("talendStats_DB - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_talendStats_DB: pstmt_talendStats_DB.executeBatch()) {
							if(countEach_talendStats_DB == -2 || countEach_talendStats_DB == -3) {
								break;
							}
							counter += countEach_talendStats_DB;
						}
						
                if(log.isDebugEnabled())
            log.debug("talendStats_DB - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
                }catch (java.sql.BatchUpdateException e){
globalMap.put("talendStats_DB_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_talendStats_DB = 0;
					for(int countEach_talendStats_DB: e.getUpdateCounts()) {
						counter += (countEach_talendStats_DB < 0 ? 0 : countEach_talendStats_DB);
					}
				
            	    	
            log.error("talendStats_DB - "  + (e.getMessage()) );
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_talendStats_DB) throws Exception {
                try {
                		
                if(log.isDebugEnabled())
            log.debug("talendStats_DB - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_talendStats_DB: pstmt_talendStats_DB.executeBatch()) {
							if(countEach_talendStats_DB == -2 || countEach_talendStats_DB == -3) {
								break;
							}
							counter += countEach_talendStats_DB;
						}
						
                if(log.isDebugEnabled())
            log.debug("talendStats_DB - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
                }catch (java.sql.BatchUpdateException e){
globalMap.put("talendStats_DB_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_talendStats_DB: e.getUpdateCounts()) {
						counter += (countEach_talendStats_DB < 0 ? 0 : countEach_talendStats_DB);
					}
					
            	    	
            log.error("talendStats_DB - "  + (e.getMessage()) );
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_talendStats_DB > 0) && (batchSize_talendStats_DB <= batchSizeCounter_talendStats_DB)) {
    		
    		            
            	    		insertedCount_talendStats_DB = new LimitBytesHelper_talendStats_DB().limitBytePart1(insertedCount_talendStats_DB,pstmt_talendStats_DB);
            	    		rowsToCommitCount_talendStats_DB = insertedCount_talendStats_DB;
            	    	
    			
			    batchSizeCounter_talendStats_DB = 0;
			}
    		

    	////////////commit every////////////
    			

 


	tos_count_talendStats_DB++;

/**
 * [talendStats_DB main ] stop
 */
	
	/**
	 * [talendStats_DB process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_DB";
	
	currentComponent="talendStats_DB";

	

 



/**
 * [talendStats_DB process_data_begin ] stop
 */
	
	/**
	 * [talendStats_DB process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_DB";
	
	currentComponent="talendStats_DB";

	

 



/**
 * [talendStats_DB process_data_end ] stop
 */



	
	/**
	 * [talendStats_STATS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS process_data_end ] stop
 */
	
	/**
	 * [talendStats_STATS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

	}


 
                if(log.isDebugEnabled())
            log.debug("talendStats_STATS - "  + ("Done.") );

ok_Hash.put("talendStats_STATS", true);
end_Hash.put("talendStats_STATS", System.currentTimeMillis());




/**
 * [talendStats_STATS end ] stop
 */

	
	/**
	 * [talendStats_DB end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_DB";
	
	currentComponent="talendStats_DB";

	



                try {
						int countSum_talendStats_DB = 0;
						if (pstmt_talendStats_DB != null && batchSizeCounter_talendStats_DB > 0) {
							
                if(log.isDebugEnabled())
            log.debug("talendStats_DB - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
							for(int countEach_talendStats_DB: pstmt_talendStats_DB.executeBatch()) {
								if(countEach_talendStats_DB == -2 || countEach_talendStats_DB == -3) {
									break;
								}
								countSum_talendStats_DB += countEach_talendStats_DB;
							}
							rowsToCommitCount_talendStats_DB += countSum_talendStats_DB;
							
                if(log.isDebugEnabled())
            log.debug("talendStats_DB - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
						}
            	    	
            	    		insertedCount_talendStats_DB += countSum_talendStats_DB;
            	    	
                }catch (java.sql.BatchUpdateException e){
globalMap.put("talendStats_DB_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_talendStats_DB = 0;
					for(int countEach_talendStats_DB: e.getUpdateCounts()) {
						countSum_talendStats_DB += (countEach_talendStats_DB < 0 ? 0 : countEach_talendStats_DB);
					}
					rowsToCommitCount_talendStats_DB += countSum_talendStats_DB;
					
            	    		insertedCount_talendStats_DB += countSum_talendStats_DB;
            	    	
            log.error("talendStats_DB - "  + (e.getMessage()) );
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_talendStats_DB != null) {
			
				SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_talendStats_DB);
			
        }
    resourceMap.put("statementClosed_talendStats_DB", true);

	nb_line_deleted_talendStats_DB=nb_line_deleted_talendStats_DB+ deletedCount_talendStats_DB;
	nb_line_update_talendStats_DB=nb_line_update_talendStats_DB + updatedCount_talendStats_DB;
	nb_line_inserted_talendStats_DB=nb_line_inserted_talendStats_DB + insertedCount_talendStats_DB;
	nb_line_rejected_talendStats_DB=nb_line_rejected_talendStats_DB + rejectedCount_talendStats_DB;
	
        globalMap.put("talendStats_DB_NB_LINE",nb_line_talendStats_DB);
        globalMap.put("talendStats_DB_NB_LINE_UPDATED",nb_line_update_talendStats_DB);
        globalMap.put("talendStats_DB_NB_LINE_INSERTED",nb_line_inserted_talendStats_DB);
        globalMap.put("talendStats_DB_NB_LINE_DELETED",nb_line_deleted_talendStats_DB);
        globalMap.put("talendStats_DB_NB_LINE_REJECTED", nb_line_rejected_talendStats_DB);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("talendStats_DB - "  + ("Done.") );

ok_Hash.put("talendStats_DB", true);
end_Hash.put("talendStats_DB", System.currentTimeMillis());




/**
 * [talendStats_DB end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:talendStats_STATS:sub_ok_talendStats_connectionStatsLogs_Commit", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("sub_ok_talendStats_connectionStatsLogs_Commit", 0, "ok");
								} 
							
							connectionStatsLogs_CommitProcess(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendStats_STATS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS finally ] stop
 */

	
	/**
	 * [talendStats_DB finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_DB";
	
	currentComponent="talendStats_DB";

	



    if (resourceMap.get("statementClosed_talendStats_DB") == null) {
                java.sql.PreparedStatement pstmtToClose_talendStats_DB = null;
                if ((pstmtToClose_talendStats_DB = (java.sql.PreparedStatement) resourceMap.remove("pstmt_talendStats_DB")) != null) {
                    pstmtToClose_talendStats_DB.close();
                }
    }
 



/**
 * [talendStats_DB finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendLogs_LOGSStruct implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
    final static byte[] commonByteArrayLock_IMPORTARDATOSCSVABD_DimProducto = new byte[0];
    static byte[] commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length) {
				if(length < 1024 && commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length == 0) {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[1024];
				} else {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length);
			strReturn = new String(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length) {
				if(length < 1024 && commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length == 0) {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[1024];
				} else {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length);
			strReturn = new String(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTARDATOSCSVABD_DimProducto) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_IMPORTARDATOSCSVABD_DimProducto) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(priority == null){
        					sb.append("<null>");
        				}else{
            				sb.append(priority);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(code == null){
        					sb.append("<null>");
        				}else{
            				sb.append(code);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_LOGSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();




	
	/**
	 * [talendLogs_DB begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_DB", false);
		start_Hash.put("talendLogs_DB", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendLogs_DB = 0;
		
                if(log.isDebugEnabled())
            log.debug("talendLogs_DB - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_talendLogs_DB{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_talendLogs_DB = new StringBuilder();
                    log4jParamters_talendLogs_DB.append("Parameters:");
                            log4jParamters_talendLogs_DB.append("USE_EXISTING_CONNECTION" + " = " + "true");
                        log4jParamters_talendLogs_DB.append(" | ");
                            log4jParamters_talendLogs_DB.append("CONNECTION" + " = " + "connectionStatsLogs");
                        log4jParamters_talendLogs_DB.append(" | ");
                            log4jParamters_talendLogs_DB.append("TABLE" + " = " + "\"Ejecucion\"");
                        log4jParamters_talendLogs_DB.append(" | ");
                            log4jParamters_talendLogs_DB.append("TABLE_ACTION" + " = " + "CREATE_IF_NOT_EXISTS");
                        log4jParamters_talendLogs_DB.append(" | ");
                            log4jParamters_talendLogs_DB.append("IDENTITY_INSERT" + " = " + "false");
                        log4jParamters_talendLogs_DB.append(" | ");
                            log4jParamters_talendLogs_DB.append("DATA_ACTION" + " = " + "INSERT");
                        log4jParamters_talendLogs_DB.append(" | ");
                            log4jParamters_talendLogs_DB.append("SPECIFY_IDENTITY_FIELD" + " = " + "false");
                        log4jParamters_talendLogs_DB.append(" | ");
                            log4jParamters_talendLogs_DB.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_talendLogs_DB.append(" | ");
                            log4jParamters_talendLogs_DB.append("USE_ALTERNATE_SCHEMA" + " = " + "false");
                        log4jParamters_talendLogs_DB.append(" | ");
                            log4jParamters_talendLogs_DB.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_talendLogs_DB.append(" | ");
                            log4jParamters_talendLogs_DB.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_talendLogs_DB.append(" | ");
                            log4jParamters_talendLogs_DB.append("IGNORE_DATE_OUTOF_RANGE" + " = " + "false");
                        log4jParamters_talendLogs_DB.append(" | ");
                            log4jParamters_talendLogs_DB.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_talendLogs_DB.append(" | ");
                            log4jParamters_talendLogs_DB.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_talendLogs_DB.append(" | ");
                            log4jParamters_talendLogs_DB.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_talendLogs_DB.append(" | ");
                            log4jParamters_talendLogs_DB.append("BATCH_SIZE" + " = " + "10000");
                        log4jParamters_talendLogs_DB.append(" | ");
                if(log.isDebugEnabled())
            log.debug("talendLogs_DB - "  + (log4jParamters_talendLogs_DB) );
                    } 
                } 
            new BytesLimit65535_talendLogs_DB().limitLog4jByte();
            }



int nb_line_talendLogs_DB = 0;
int nb_line_update_talendLogs_DB = 0;
int nb_line_inserted_talendLogs_DB = 0;
int nb_line_deleted_talendLogs_DB = 0;
int nb_line_rejected_talendLogs_DB = 0;

int deletedCount_talendLogs_DB=0;
int updatedCount_talendLogs_DB=0;
int insertedCount_talendLogs_DB=0;
int rowsToCommitCount_talendLogs_DB=0;
int rejectedCount_talendLogs_DB=0;
String dbschema_talendLogs_DB = null;
String tableName_talendLogs_DB = null;
boolean whetherReject_talendLogs_DB = false;

java.util.Calendar calendar_talendLogs_DB = java.util.Calendar.getInstance();
long year1_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_talendLogs_DB;

java.util.Calendar calendar_datetimeoffset_talendLogs_DB = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



	
java.sql.Connection conn_talendLogs_DB = null;
String dbUser_talendLogs_DB = null;
	dbschema_talendLogs_DB = (String)globalMap.get("dbschema_connectionStatsLogs");
	
	conn_talendLogs_DB = (java.sql.Connection)globalMap.get("conn_connectionStatsLogs");
	
                if(log.isDebugEnabled())
            log.debug("talendLogs_DB - "  + ("Uses an existing connection with username '")  + (conn_talendLogs_DB.getMetaData().getUserName())  + ("'. Connection URL: ")  + (conn_talendLogs_DB.getMetaData().getURL())  + (".") );
                if(log.isDebugEnabled())
            log.debug("talendLogs_DB - "  + ("Connection is set auto commit to '")  + (conn_talendLogs_DB.getAutoCommit())  + ("'.") );
   int batchSize_talendLogs_DB = 10000;
   int batchSizeCounter_talendLogs_DB=0;

if(dbschema_talendLogs_DB == null || dbschema_talendLogs_DB.trim().length() == 0) {
    tableName_talendLogs_DB = "Ejecucion";
} else {
    tableName_talendLogs_DB = dbschema_talendLogs_DB + "].[" + "Ejecucion";
}
	int count_talendLogs_DB=0;


                    // [%connection%][checktable][tableName]
                    String keyCheckTable_talendLogs_DB = conn_talendLogs_DB + "[checktable]" + "[" + "Ejecucion" + "]";

                if(GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB)== null){//}

                    synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_talendLogs_DB)) {//}
                        if(GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB)== null){//}
                                boolean whetherExist_talendLogs_DB = false;
                                try (java.sql.Statement isExistStmt_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
                                    try {
                                        isExistStmt_talendLogs_DB.execute("SELECT TOP 1 1 FROM [" + tableName_talendLogs_DB + "]" );
                                        whetherExist_talendLogs_DB = true;
                                    } catch (java.lang.Exception e){
globalMap.put("talendLogs_DB_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_talendLogs_DB = false;
                                    }
                                }
                                if(!whetherExist_talendLogs_DB) {
                                    try (java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
                if(log.isDebugEnabled())
            log.debug("talendLogs_DB - "  + ("Creating")  + (" table '")  + ("[" +tableName_talendLogs_DB + "]")  + ("'.") );
                                        stmtCreate_talendLogs_DB.execute("CREATE TABLE [" + tableName_talendLogs_DB + "]([moment] DATETIME ,[pid] VARCHAR(20)  ,[root_pid] VARCHAR(20)  ,[father_pid] VARCHAR(20)  ,[project] VARCHAR(50)  ,[job] VARCHAR(255)  ,[context] VARCHAR(50)  ,[priority] INT ,[type] VARCHAR(255)  ,[origin] VARCHAR(255)  ,[message] VARCHAR(255)  ,[code] INT )");
                if(log.isDebugEnabled())
            log.debug("talendLogs_DB - "  + ("Create")  + (" table '")  + ("[" +tableName_talendLogs_DB + "]")  + ("' has succeeded.") );
                                    }
                                }
                            GlobalResource.resourceMap.put(keyCheckTable_talendLogs_DB, true);
            //{{{
                        } // end of if
                    } // end synchronized
                }
        String insert_talendLogs_DB = "INSERT INTO [" + tableName_talendLogs_DB + "] ([moment],[pid],[root_pid],[father_pid],[project],[job],[context],[priority],[type],[origin],[message],[code]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

        java.sql.PreparedStatement pstmt_talendLogs_DB = null;
        String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]" + "[" + "Ejecucion" + "]";
        pstmt_talendLogs_DB = SharedDBPreparedStatement.getSharedPreparedStatement(conn_talendLogs_DB,insert_talendLogs_DB,keyPsmt_talendLogs_DB);
        resourceMap.put("pstmt_talendLogs_DB", pstmt_talendLogs_DB);
 	boolean isShareIdentity_talendLogs_DB = globalMap.get("shareIdentitySetting_connectionStatsLogs") != null && (Boolean)globalMap.get("shareIdentitySetting_connectionStatsLogs") == true;

 



/**
 * [talendLogs_DB begin ] stop
 */



	
	/**
	 * [talendLogs_LOGS begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_LOGS", false);
		start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
		int tos_count_talendLogs_LOGS = 0;
		
                if(log.isDebugEnabled())
            log.debug("talendLogs_LOGS - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_talendLogs_LOGS{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_talendLogs_LOGS = new StringBuilder();
                    log4jParamters_talendLogs_LOGS.append("Parameters:");
                            log4jParamters_talendLogs_LOGS.append("CATCH_JAVA_EXCEPTION" + " = " + "true");
                        log4jParamters_talendLogs_LOGS.append(" | ");
                            log4jParamters_talendLogs_LOGS.append("CATCH_TDIE" + " = " + "true");
                        log4jParamters_talendLogs_LOGS.append(" | ");
                            log4jParamters_talendLogs_LOGS.append("CATCH_TWARN" + " = " + "true");
                        log4jParamters_talendLogs_LOGS.append(" | ");
                if(log.isDebugEnabled())
            log.debug("talendLogs_LOGS - "  + (log4jParamters_talendLogs_LOGS) );
                    } 
                } 
            new BytesLimit65535_talendLogs_LOGS().limitLog4jByte();
            }

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
		row_talendLogs_LOGS.type = lcm.getType();
		row_talendLogs_LOGS.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row_talendLogs_LOGS.priority = lcm.getPriority();
		row_talendLogs_LOGS.message = lcm.getMessage();
		row_talendLogs_LOGS.code = lcm.getCode();
		
		row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();
	
    	row_talendLogs_LOGS.pid = pid;
		row_talendLogs_LOGS.root_pid = rootPid;
		row_talendLogs_LOGS.father_pid = fatherPid;
	
    	row_talendLogs_LOGS.project = projectName;
    	row_talendLogs_LOGS.job = jobName;
    	row_talendLogs_LOGS.context = contextStr;
    		
 



/**
 * [talendLogs_LOGS begin ] stop
 */
	
	/**
	 * [talendLogs_LOGS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 


	tos_count_talendLogs_LOGS++;

/**
 * [talendLogs_LOGS main ] stop
 */
	
	/**
	 * [talendLogs_LOGS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_DB main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main"
						
						);
					}
					



        whetherReject_talendLogs_DB = false;
                    if(row_talendLogs_LOGS.moment != null) {
pstmt_talendLogs_DB.setTimestamp(1, new java.sql.Timestamp(row_talendLogs_LOGS.moment.getTime()));
} else {
pstmt_talendLogs_DB.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(row_talendLogs_LOGS.pid == null) {
pstmt_talendLogs_DB.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(2, row_talendLogs_LOGS.pid);
}

                    if(row_talendLogs_LOGS.root_pid == null) {
pstmt_talendLogs_DB.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(3, row_talendLogs_LOGS.root_pid);
}

                    if(row_talendLogs_LOGS.father_pid == null) {
pstmt_talendLogs_DB.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(4, row_talendLogs_LOGS.father_pid);
}

                    if(row_talendLogs_LOGS.project == null) {
pstmt_talendLogs_DB.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(5, row_talendLogs_LOGS.project);
}

                    if(row_talendLogs_LOGS.job == null) {
pstmt_talendLogs_DB.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(6, row_talendLogs_LOGS.job);
}

                    if(row_talendLogs_LOGS.context == null) {
pstmt_talendLogs_DB.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(7, row_talendLogs_LOGS.context);
}

                    if(row_talendLogs_LOGS.priority == null) {
pstmt_talendLogs_DB.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_talendLogs_DB.setInt(8, row_talendLogs_LOGS.priority);
}

                    if(row_talendLogs_LOGS.type == null) {
pstmt_talendLogs_DB.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(9, row_talendLogs_LOGS.type);
}

                    if(row_talendLogs_LOGS.origin == null) {
pstmt_talendLogs_DB.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(10, row_talendLogs_LOGS.origin);
}

                    if(row_talendLogs_LOGS.message == null) {
pstmt_talendLogs_DB.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(11, row_talendLogs_LOGS.message);
}

                    if(row_talendLogs_LOGS.code == null) {
pstmt_talendLogs_DB.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_talendLogs_DB.setInt(12, row_talendLogs_LOGS.code);
}


        		pstmt_talendLogs_DB.addBatch();
        		nb_line_talendLogs_DB++;
        		
    		 
                if(log.isDebugEnabled())
            log.debug("talendLogs_DB - "  + ("Adding the record ")  + (nb_line_talendLogs_DB)  + (" to the ")  + ("INSERT")  + (" batch.") );
    		  batchSizeCounter_talendLogs_DB++;
    		
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_talendLogs_DB{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_talendLogs_DB) throws Exception {
                try {
						
                if(log.isDebugEnabled())
            log.debug("talendLogs_DB - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
							if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							counter += countEach_talendLogs_DB;
						}
						
                if(log.isDebugEnabled())
            log.debug("talendLogs_DB - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
                }catch (java.sql.BatchUpdateException e){
globalMap.put("talendLogs_DB_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_talendLogs_DB = 0;
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
				
            	    	
            log.error("talendLogs_DB - "  + (e.getMessage()) );
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_talendLogs_DB) throws Exception {
                try {
                		
                if(log.isDebugEnabled())
            log.debug("talendLogs_DB - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
							if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							counter += countEach_talendLogs_DB;
						}
						
                if(log.isDebugEnabled())
            log.debug("talendLogs_DB - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
                }catch (java.sql.BatchUpdateException e){
globalMap.put("talendLogs_DB_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
					
            	    	
            log.error("talendLogs_DB - "  + (e.getMessage()) );
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_talendLogs_DB > 0) && (batchSize_talendLogs_DB <= batchSizeCounter_talendLogs_DB)) {
    		
    		            
            	    		insertedCount_talendLogs_DB = new LimitBytesHelper_talendLogs_DB().limitBytePart1(insertedCount_talendLogs_DB,pstmt_talendLogs_DB);
            	    		rowsToCommitCount_talendLogs_DB = insertedCount_talendLogs_DB;
            	    	
    			
			    batchSizeCounter_talendLogs_DB = 0;
			}
    		

    	////////////commit every////////////
    			

 


	tos_count_talendLogs_DB++;

/**
 * [talendLogs_DB main ] stop
 */
	
	/**
	 * [talendLogs_DB process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	

 



/**
 * [talendLogs_DB process_data_begin ] stop
 */
	
	/**
	 * [talendLogs_DB process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	

 



/**
 * [talendLogs_DB process_data_end ] stop
 */



	
	/**
	 * [talendLogs_LOGS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_end ] stop
 */
	
	/**
	 * [talendLogs_LOGS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
	}
} catch (Exception e_talendLogs_LOGS) {
globalMap.put("talendLogs_LOGS_ERROR_MESSAGE",e_talendLogs_LOGS.getMessage());
	logIgnoredError(String.format("talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s", e_talendLogs_LOGS), e_talendLogs_LOGS);
}

 
                if(log.isDebugEnabled())
            log.debug("talendLogs_LOGS - "  + ("Done.") );

ok_Hash.put("talendLogs_LOGS", true);
end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());




/**
 * [talendLogs_LOGS end ] stop
 */

	
	/**
	 * [talendLogs_DB end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	



                try {
						int countSum_talendLogs_DB = 0;
						if (pstmt_talendLogs_DB != null && batchSizeCounter_talendLogs_DB > 0) {
							
                if(log.isDebugEnabled())
            log.debug("talendLogs_DB - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
							for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
								if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
									break;
								}
								countSum_talendLogs_DB += countEach_talendLogs_DB;
							}
							rowsToCommitCount_talendLogs_DB += countSum_talendLogs_DB;
							
                if(log.isDebugEnabled())
            log.debug("talendLogs_DB - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
						}
            	    	
            	    		insertedCount_talendLogs_DB += countSum_talendLogs_DB;
            	    	
                }catch (java.sql.BatchUpdateException e){
globalMap.put("talendLogs_DB_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_talendLogs_DB = 0;
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
					rowsToCommitCount_talendLogs_DB += countSum_talendLogs_DB;
					
            	    		insertedCount_talendLogs_DB += countSum_talendLogs_DB;
            	    	
            log.error("talendLogs_DB - "  + (e.getMessage()) );
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_talendLogs_DB != null) {
			
				SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_talendLogs_DB);
			
        }
    resourceMap.put("statementClosed_talendLogs_DB", true);

	nb_line_deleted_talendLogs_DB=nb_line_deleted_talendLogs_DB+ deletedCount_talendLogs_DB;
	nb_line_update_talendLogs_DB=nb_line_update_talendLogs_DB + updatedCount_talendLogs_DB;
	nb_line_inserted_talendLogs_DB=nb_line_inserted_talendLogs_DB + insertedCount_talendLogs_DB;
	nb_line_rejected_talendLogs_DB=nb_line_rejected_talendLogs_DB + rejectedCount_talendLogs_DB;
	
        globalMap.put("talendLogs_DB_NB_LINE",nb_line_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_UPDATED",nb_line_update_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_INSERTED",nb_line_inserted_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_DELETED",nb_line_deleted_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_REJECTED", nb_line_rejected_talendLogs_DB);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("talendLogs_DB - "  + ("Done.") );

ok_Hash.put("talendLogs_DB", true);
end_Hash.put("talendLogs_DB", System.currentTimeMillis());




/**
 * [talendLogs_DB end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("sub_ok_talendLogs_connectionStatsLogs_Commit", 0, "ok");
								} 
							
							connectionStatsLogs_CommitProcess(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendLogs_LOGS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS finally ] stop
 */

	
	/**
	 * [talendLogs_DB finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	



    if (resourceMap.get("statementClosed_talendLogs_DB") == null) {
                java.sql.PreparedStatement pstmtToClose_talendLogs_DB = null;
                if ((pstmtToClose_talendLogs_DB = (java.sql.PreparedStatement) resourceMap.remove("pstmt_talendLogs_DB")) != null) {
                    pstmtToClose_talendLogs_DB.close();
                }
    }
 



/**
 * [talendLogs_DB finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendMeter_METTERStruct implements routines.system.IPersistableRow<row_talendMeter_METTERStruct> {
    final static byte[] commonByteArrayLock_IMPORTARDATOSCSVABD_DimProducto = new byte[0];
    static byte[] commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length) {
				if(length < 1024 && commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length == 0) {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[1024];
				} else {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length);
			strReturn = new String(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length) {
				if(length < 1024 && commonByteArray_IMPORTARDATOSCSVABD_DimProducto.length == 0) {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[1024];
				} else {
   					commonByteArray_IMPORTARDATOSCSVABD_DimProducto = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length);
			strReturn = new String(commonByteArray_IMPORTARDATOSCSVABD_DimProducto, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTARDATOSCSVABD_DimProducto) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_IMPORTARDATOSCSVABD_DimProducto) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(label == null){
        					sb.append("<null>");
        				}else{
            				sb.append(label);
            			}
            		
        			sb.append("|");
        		
        				if(count == null){
        					sb.append("<null>");
        				}else{
            				sb.append(count);
            			}
            		
        			sb.append("|");
        		
        				if(reference == null){
        					sb.append("<null>");
        				}else{
            				sb.append(reference);
            			}
            		
        			sb.append("|");
        		
        				if(thresholds == null){
        					sb.append("<null>");
        				}else{
            				sb.append(thresholds);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row_talendMeter_METTERStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendMeter_METTERProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendMeter_METTERStruct row_talendMeter_METTER = new row_talendMeter_METTERStruct();




	
	/**
	 * [talendMeter_DB begin ] start
	 */

	

	
		
		ok_Hash.put("talendMeter_DB", false);
		start_Hash.put("talendMeter_DB", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendMeter_DB";
	
	currentComponent="talendMeter_DB";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendMeter_DB = 0;
		
                if(log.isDebugEnabled())
            log.debug("talendMeter_DB - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_talendMeter_DB{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_talendMeter_DB = new StringBuilder();
                    log4jParamters_talendMeter_DB.append("Parameters:");
                            log4jParamters_talendMeter_DB.append("USE_EXISTING_CONNECTION" + " = " + "true");
                        log4jParamters_talendMeter_DB.append(" | ");
                            log4jParamters_talendMeter_DB.append("CONNECTION" + " = " + "connectionStatsLogs");
                        log4jParamters_talendMeter_DB.append(" | ");
                            log4jParamters_talendMeter_DB.append("TABLE" + " = " + "\"Metricas\"");
                        log4jParamters_talendMeter_DB.append(" | ");
                            log4jParamters_talendMeter_DB.append("TABLE_ACTION" + " = " + "CREATE_IF_NOT_EXISTS");
                        log4jParamters_talendMeter_DB.append(" | ");
                            log4jParamters_talendMeter_DB.append("IDENTITY_INSERT" + " = " + "false");
                        log4jParamters_talendMeter_DB.append(" | ");
                            log4jParamters_talendMeter_DB.append("DATA_ACTION" + " = " + "INSERT");
                        log4jParamters_talendMeter_DB.append(" | ");
                            log4jParamters_talendMeter_DB.append("SPECIFY_IDENTITY_FIELD" + " = " + "false");
                        log4jParamters_talendMeter_DB.append(" | ");
                            log4jParamters_talendMeter_DB.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_talendMeter_DB.append(" | ");
                            log4jParamters_talendMeter_DB.append("USE_ALTERNATE_SCHEMA" + " = " + "false");
                        log4jParamters_talendMeter_DB.append(" | ");
                            log4jParamters_talendMeter_DB.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_talendMeter_DB.append(" | ");
                            log4jParamters_talendMeter_DB.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_talendMeter_DB.append(" | ");
                            log4jParamters_talendMeter_DB.append("IGNORE_DATE_OUTOF_RANGE" + " = " + "false");
                        log4jParamters_talendMeter_DB.append(" | ");
                            log4jParamters_talendMeter_DB.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_talendMeter_DB.append(" | ");
                            log4jParamters_talendMeter_DB.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_talendMeter_DB.append(" | ");
                            log4jParamters_talendMeter_DB.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_talendMeter_DB.append(" | ");
                            log4jParamters_talendMeter_DB.append("BATCH_SIZE" + " = " + "10000");
                        log4jParamters_talendMeter_DB.append(" | ");
                if(log.isDebugEnabled())
            log.debug("talendMeter_DB - "  + (log4jParamters_talendMeter_DB) );
                    } 
                } 
            new BytesLimit65535_talendMeter_DB().limitLog4jByte();
            }



int nb_line_talendMeter_DB = 0;
int nb_line_update_talendMeter_DB = 0;
int nb_line_inserted_talendMeter_DB = 0;
int nb_line_deleted_talendMeter_DB = 0;
int nb_line_rejected_talendMeter_DB = 0;

int deletedCount_talendMeter_DB=0;
int updatedCount_talendMeter_DB=0;
int insertedCount_talendMeter_DB=0;
int rowsToCommitCount_talendMeter_DB=0;
int rejectedCount_talendMeter_DB=0;
String dbschema_talendMeter_DB = null;
String tableName_talendMeter_DB = null;
boolean whetherReject_talendMeter_DB = false;

java.util.Calendar calendar_talendMeter_DB = java.util.Calendar.getInstance();
long year1_talendMeter_DB = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_talendMeter_DB = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_talendMeter_DB = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_talendMeter_DB;

java.util.Calendar calendar_datetimeoffset_talendMeter_DB = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



	
java.sql.Connection conn_talendMeter_DB = null;
String dbUser_talendMeter_DB = null;
	dbschema_talendMeter_DB = (String)globalMap.get("dbschema_connectionStatsLogs");
	
	conn_talendMeter_DB = (java.sql.Connection)globalMap.get("conn_connectionStatsLogs");
	
                if(log.isDebugEnabled())
            log.debug("talendMeter_DB - "  + ("Uses an existing connection with username '")  + (conn_talendMeter_DB.getMetaData().getUserName())  + ("'. Connection URL: ")  + (conn_talendMeter_DB.getMetaData().getURL())  + (".") );
                if(log.isDebugEnabled())
            log.debug("talendMeter_DB - "  + ("Connection is set auto commit to '")  + (conn_talendMeter_DB.getAutoCommit())  + ("'.") );
   int batchSize_talendMeter_DB = 10000;
   int batchSizeCounter_talendMeter_DB=0;

if(dbschema_talendMeter_DB == null || dbschema_talendMeter_DB.trim().length() == 0) {
    tableName_talendMeter_DB = "Metricas";
} else {
    tableName_talendMeter_DB = dbschema_talendMeter_DB + "].[" + "Metricas";
}
	int count_talendMeter_DB=0;


                    // [%connection%][checktable][tableName]
                    String keyCheckTable_talendMeter_DB = conn_talendMeter_DB + "[checktable]" + "[" + "Metricas" + "]";

                if(GlobalResource.resourceMap.get(keyCheckTable_talendMeter_DB)== null){//}

                    synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_talendMeter_DB)) {//}
                        if(GlobalResource.resourceMap.get(keyCheckTable_talendMeter_DB)== null){//}
                                boolean whetherExist_talendMeter_DB = false;
                                try (java.sql.Statement isExistStmt_talendMeter_DB = conn_talendMeter_DB.createStatement()) {
                                    try {
                                        isExistStmt_talendMeter_DB.execute("SELECT TOP 1 1 FROM [" + tableName_talendMeter_DB + "]" );
                                        whetherExist_talendMeter_DB = true;
                                    } catch (java.lang.Exception e){
globalMap.put("talendMeter_DB_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_talendMeter_DB = false;
                                    }
                                }
                                if(!whetherExist_talendMeter_DB) {
                                    try (java.sql.Statement stmtCreate_talendMeter_DB = conn_talendMeter_DB.createStatement()) {
                if(log.isDebugEnabled())
            log.debug("talendMeter_DB - "  + ("Creating")  + (" table '")  + ("[" +tableName_talendMeter_DB + "]")  + ("'.") );
                                        stmtCreate_talendMeter_DB.execute("CREATE TABLE [" + tableName_talendMeter_DB + "]([moment] DATETIME ,[pid] VARCHAR(20)  ,[father_pid] VARCHAR(20)  ,[root_pid] VARCHAR(20)  ,[system_pid] BIGINT ,[project] VARCHAR(50)  ,[job] VARCHAR(255)  ,[job_repository_id] VARCHAR(255)  ,[job_version] VARCHAR(255)  ,[context] VARCHAR(50)  ,[origin] VARCHAR(255)  ,[label] VARCHAR(255)  ,[count] INT ,[reference] INT ,[thresholds] VARCHAR(255)  )");
                if(log.isDebugEnabled())
            log.debug("talendMeter_DB - "  + ("Create")  + (" table '")  + ("[" +tableName_talendMeter_DB + "]")  + ("' has succeeded.") );
                                    }
                                }
                            GlobalResource.resourceMap.put(keyCheckTable_talendMeter_DB, true);
            //{{{
                        } // end of if
                    } // end synchronized
                }
        String insert_talendMeter_DB = "INSERT INTO [" + tableName_talendMeter_DB + "] ([moment],[pid],[father_pid],[root_pid],[system_pid],[project],[job],[job_repository_id],[job_version],[context],[origin],[label],[count],[reference],[thresholds]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

        java.sql.PreparedStatement pstmt_talendMeter_DB = null;
        String keyPsmt_talendMeter_DB = conn_talendMeter_DB + "[psmt]" + "[" + "Metricas" + "]";
        pstmt_talendMeter_DB = SharedDBPreparedStatement.getSharedPreparedStatement(conn_talendMeter_DB,insert_talendMeter_DB,keyPsmt_talendMeter_DB);
        resourceMap.put("pstmt_talendMeter_DB", pstmt_talendMeter_DB);
 	boolean isShareIdentity_talendMeter_DB = globalMap.get("shareIdentitySetting_connectionStatsLogs") != null && (Boolean)globalMap.get("shareIdentitySetting_connectionStatsLogs") == true;

 



/**
 * [talendMeter_DB begin ] stop
 */



	
	/**
	 * [talendMeter_METTER begin ] start
	 */

	

	
		
		ok_Hash.put("talendMeter_METTER", false);
		start_Hash.put("talendMeter_METTER", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	
		int tos_count_talendMeter_METTER = 0;
		
                if(log.isDebugEnabled())
            log.debug("talendMeter_METTER - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_talendMeter_METTER{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_talendMeter_METTER = new StringBuilder();
                    log4jParamters_talendMeter_METTER.append("Parameters:");
                if(log.isDebugEnabled())
            log.debug("talendMeter_METTER - "  + (log4jParamters_talendMeter_METTER) );
                    } 
                } 
            new BytesLimit65535_talendMeter_METTER().limitLog4jByte();
            }

	for (MetterCatcherUtils.MetterCatcherMessage mcm : talendMeter_METTER.getMessages()) {
		row_talendMeter_METTER.pid = pid;
		row_talendMeter_METTER.root_pid = rootPid;
		row_talendMeter_METTER.father_pid = fatherPid;	
        row_talendMeter_METTER.project = projectName;
        row_talendMeter_METTER.job = jobName;
        row_talendMeter_METTER.context = contextStr;
		row_talendMeter_METTER.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row_talendMeter_METTER.moment = mcm.getMoment();
		row_talendMeter_METTER.job_version = mcm.getJobVersion();
		row_talendMeter_METTER.job_repository_id = mcm.getJobId();
		row_talendMeter_METTER.system_pid = mcm.getSystemPid();
		row_talendMeter_METTER.label = mcm.getLabel();
		row_talendMeter_METTER.count = mcm.getCount();
		row_talendMeter_METTER.reference = talendMeter_METTER.getConnLinesCount(mcm.getReferense()+"_count");
		row_talendMeter_METTER.thresholds = mcm.getThresholds();
		

 



/**
 * [talendMeter_METTER begin ] stop
 */
	
	/**
	 * [talendMeter_METTER main ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 


	tos_count_talendMeter_METTER++;

/**
 * [talendMeter_METTER main ] stop
 */
	
	/**
	 * [talendMeter_METTER process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 



/**
 * [talendMeter_METTER process_data_begin ] stop
 */

	
	/**
	 * [talendMeter_DB main ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_DB";
	
	currentComponent="talendMeter_DB";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main"
						
						);
					}
					



        whetherReject_talendMeter_DB = false;
                    if(row_talendMeter_METTER.moment != null) {
pstmt_talendMeter_DB.setTimestamp(1, new java.sql.Timestamp(row_talendMeter_METTER.moment.getTime()));
} else {
pstmt_talendMeter_DB.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(row_talendMeter_METTER.pid == null) {
pstmt_talendMeter_DB.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_talendMeter_DB.setString(2, row_talendMeter_METTER.pid);
}

                    if(row_talendMeter_METTER.father_pid == null) {
pstmt_talendMeter_DB.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_talendMeter_DB.setString(3, row_talendMeter_METTER.father_pid);
}

                    if(row_talendMeter_METTER.root_pid == null) {
pstmt_talendMeter_DB.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_talendMeter_DB.setString(4, row_talendMeter_METTER.root_pid);
}

                    if(row_talendMeter_METTER.system_pid == null) {
pstmt_talendMeter_DB.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_talendMeter_DB.setLong(5, row_talendMeter_METTER.system_pid);
}

                    if(row_talendMeter_METTER.project == null) {
pstmt_talendMeter_DB.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_talendMeter_DB.setString(6, row_talendMeter_METTER.project);
}

                    if(row_talendMeter_METTER.job == null) {
pstmt_talendMeter_DB.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_talendMeter_DB.setString(7, row_talendMeter_METTER.job);
}

                    if(row_talendMeter_METTER.job_repository_id == null) {
pstmt_talendMeter_DB.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_talendMeter_DB.setString(8, row_talendMeter_METTER.job_repository_id);
}

                    if(row_talendMeter_METTER.job_version == null) {
pstmt_talendMeter_DB.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_talendMeter_DB.setString(9, row_talendMeter_METTER.job_version);
}

                    if(row_talendMeter_METTER.context == null) {
pstmt_talendMeter_DB.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_talendMeter_DB.setString(10, row_talendMeter_METTER.context);
}

                    if(row_talendMeter_METTER.origin == null) {
pstmt_talendMeter_DB.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_talendMeter_DB.setString(11, row_talendMeter_METTER.origin);
}

                    if(row_talendMeter_METTER.label == null) {
pstmt_talendMeter_DB.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_talendMeter_DB.setString(12, row_talendMeter_METTER.label);
}

                    if(row_talendMeter_METTER.count == null) {
pstmt_talendMeter_DB.setNull(13, java.sql.Types.INTEGER);
} else {pstmt_talendMeter_DB.setInt(13, row_talendMeter_METTER.count);
}

                    if(row_talendMeter_METTER.reference == null) {
pstmt_talendMeter_DB.setNull(14, java.sql.Types.INTEGER);
} else {pstmt_talendMeter_DB.setInt(14, row_talendMeter_METTER.reference);
}

                    if(row_talendMeter_METTER.thresholds == null) {
pstmt_talendMeter_DB.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_talendMeter_DB.setString(15, row_talendMeter_METTER.thresholds);
}


        		pstmt_talendMeter_DB.addBatch();
        		nb_line_talendMeter_DB++;
        		
    		 
                if(log.isDebugEnabled())
            log.debug("talendMeter_DB - "  + ("Adding the record ")  + (nb_line_talendMeter_DB)  + (" to the ")  + ("INSERT")  + (" batch.") );
    		  batchSizeCounter_talendMeter_DB++;
    		
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_talendMeter_DB{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_talendMeter_DB) throws Exception {
                try {
						
                if(log.isDebugEnabled())
            log.debug("talendMeter_DB - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_talendMeter_DB: pstmt_talendMeter_DB.executeBatch()) {
							if(countEach_talendMeter_DB == -2 || countEach_talendMeter_DB == -3) {
								break;
							}
							counter += countEach_talendMeter_DB;
						}
						
                if(log.isDebugEnabled())
            log.debug("talendMeter_DB - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
                }catch (java.sql.BatchUpdateException e){
globalMap.put("talendMeter_DB_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_talendMeter_DB = 0;
					for(int countEach_talendMeter_DB: e.getUpdateCounts()) {
						counter += (countEach_talendMeter_DB < 0 ? 0 : countEach_talendMeter_DB);
					}
				
            	    	
            log.error("talendMeter_DB - "  + (e.getMessage()) );
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_talendMeter_DB) throws Exception {
                try {
                		
                if(log.isDebugEnabled())
            log.debug("talendMeter_DB - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_talendMeter_DB: pstmt_talendMeter_DB.executeBatch()) {
							if(countEach_talendMeter_DB == -2 || countEach_talendMeter_DB == -3) {
								break;
							}
							counter += countEach_talendMeter_DB;
						}
						
                if(log.isDebugEnabled())
            log.debug("talendMeter_DB - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
                }catch (java.sql.BatchUpdateException e){
globalMap.put("talendMeter_DB_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_talendMeter_DB: e.getUpdateCounts()) {
						counter += (countEach_talendMeter_DB < 0 ? 0 : countEach_talendMeter_DB);
					}
					
            	    	
            log.error("talendMeter_DB - "  + (e.getMessage()) );
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_talendMeter_DB > 0) && (batchSize_talendMeter_DB <= batchSizeCounter_talendMeter_DB)) {
    		
    		            
            	    		insertedCount_talendMeter_DB = new LimitBytesHelper_talendMeter_DB().limitBytePart1(insertedCount_talendMeter_DB,pstmt_talendMeter_DB);
            	    		rowsToCommitCount_talendMeter_DB = insertedCount_talendMeter_DB;
            	    	
    			
			    batchSizeCounter_talendMeter_DB = 0;
			}
    		

    	////////////commit every////////////
    			

 


	tos_count_talendMeter_DB++;

/**
 * [talendMeter_DB main ] stop
 */
	
	/**
	 * [talendMeter_DB process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_DB";
	
	currentComponent="talendMeter_DB";

	

 



/**
 * [talendMeter_DB process_data_begin ] stop
 */
	
	/**
	 * [talendMeter_DB process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_DB";
	
	currentComponent="talendMeter_DB";

	

 



/**
 * [talendMeter_DB process_data_end ] stop
 */



	
	/**
	 * [talendMeter_METTER process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 



/**
 * [talendMeter_METTER process_data_end ] stop
 */
	
	/**
	 * [talendMeter_METTER end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

	}


 
                if(log.isDebugEnabled())
            log.debug("talendMeter_METTER - "  + ("Done.") );

ok_Hash.put("talendMeter_METTER", true);
end_Hash.put("talendMeter_METTER", System.currentTimeMillis());




/**
 * [talendMeter_METTER end ] stop
 */

	
	/**
	 * [talendMeter_DB end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_DB";
	
	currentComponent="talendMeter_DB";

	



                try {
						int countSum_talendMeter_DB = 0;
						if (pstmt_talendMeter_DB != null && batchSizeCounter_talendMeter_DB > 0) {
							
                if(log.isDebugEnabled())
            log.debug("talendMeter_DB - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
							for(int countEach_talendMeter_DB: pstmt_talendMeter_DB.executeBatch()) {
								if(countEach_talendMeter_DB == -2 || countEach_talendMeter_DB == -3) {
									break;
								}
								countSum_talendMeter_DB += countEach_talendMeter_DB;
							}
							rowsToCommitCount_talendMeter_DB += countSum_talendMeter_DB;
							
                if(log.isDebugEnabled())
            log.debug("talendMeter_DB - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
						}
            	    	
            	    		insertedCount_talendMeter_DB += countSum_talendMeter_DB;
            	    	
                }catch (java.sql.BatchUpdateException e){
globalMap.put("talendMeter_DB_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_talendMeter_DB = 0;
					for(int countEach_talendMeter_DB: e.getUpdateCounts()) {
						countSum_talendMeter_DB += (countEach_talendMeter_DB < 0 ? 0 : countEach_talendMeter_DB);
					}
					rowsToCommitCount_talendMeter_DB += countSum_talendMeter_DB;
					
            	    		insertedCount_talendMeter_DB += countSum_talendMeter_DB;
            	    	
            log.error("talendMeter_DB - "  + (e.getMessage()) );
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_talendMeter_DB != null) {
			
				SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_talendMeter_DB);
			
        }
    resourceMap.put("statementClosed_talendMeter_DB", true);

	nb_line_deleted_talendMeter_DB=nb_line_deleted_talendMeter_DB+ deletedCount_talendMeter_DB;
	nb_line_update_talendMeter_DB=nb_line_update_talendMeter_DB + updatedCount_talendMeter_DB;
	nb_line_inserted_talendMeter_DB=nb_line_inserted_talendMeter_DB + insertedCount_talendMeter_DB;
	nb_line_rejected_talendMeter_DB=nb_line_rejected_talendMeter_DB + rejectedCount_talendMeter_DB;
	
        globalMap.put("talendMeter_DB_NB_LINE",nb_line_talendMeter_DB);
        globalMap.put("talendMeter_DB_NB_LINE_UPDATED",nb_line_update_talendMeter_DB);
        globalMap.put("talendMeter_DB_NB_LINE_INSERTED",nb_line_inserted_talendMeter_DB);
        globalMap.put("talendMeter_DB_NB_LINE_DELETED",nb_line_deleted_talendMeter_DB);
        globalMap.put("talendMeter_DB_NB_LINE_REJECTED", nb_line_rejected_talendMeter_DB);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("talendMeter_DB - "  + ("Done.") );

ok_Hash.put("talendMeter_DB", true);
end_Hash.put("talendMeter_DB", System.currentTimeMillis());




/**
 * [talendMeter_DB end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:talendMeter_METTER:sub_ok_talendMeter_connectionStatsLogs_Commit", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("sub_ok_talendMeter_connectionStatsLogs_Commit", 0, "ok");
								} 
							
							connectionStatsLogs_CommitProcess(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendMeter_METTER finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 



/**
 * [talendMeter_METTER finally ] stop
 */

	
	/**
	 * [talendMeter_DB finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_DB";
	
	currentComponent="talendMeter_DB";

	



    if (resourceMap.get("statementClosed_talendMeter_DB") == null) {
                java.sql.PreparedStatement pstmtToClose_talendMeter_DB = null;
                if ((pstmtToClose_talendMeter_DB = (java.sql.PreparedStatement) resourceMap.remove("pstmt_talendMeter_DB")) != null) {
                    pstmtToClose_talendMeter_DB.close();
                }
    }
 



/**
 * [talendMeter_DB finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final DimProducto DimProductoClass = new DimProducto();

        int exitCode = DimProductoClass.runJobInTOS(args);
	        if(exitCode==0){
		        log.info("TalendJob: 'DimProducto' - Done.");
	        }

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

	        if(!"".equals(log4jLevel)){
	        	
				
				
				if("trace".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.TRACE);
				}else if("debug".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.DEBUG);
				}else if("info".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.INFO);
				}else if("warn".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.WARN);
				}else if("error".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.ERROR);
				}else if("fatal".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.FATAL);
				}else if ("off".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.OFF);
				}
				org.apache.logging.log4j.core.config.Configurator.setLevel(org.apache.logging.log4j.LogManager.getRootLogger().getName(), log.getLevel());
				
    	    }
        	log.info("TalendJob: 'DimProducto' - Start.");
    	
    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = DimProducto.class.getClassLoader().getResourceAsStream("importardatoscsvabd/dimproducto_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = DimProducto.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("Desarrollo_Datawarehouse_AdditionalParams", "id_String");
                        if(context.getStringValue("Desarrollo_Datawarehouse_AdditionalParams") == null) {
                            context.Desarrollo_Datawarehouse_AdditionalParams = null;
                        } else {
                            context.Desarrollo_Datawarehouse_AdditionalParams=(String) context.getProperty("Desarrollo_Datawarehouse_AdditionalParams");
                        }
                        context.setContextType("Desarrollo_Datawarehouse_Server", "id_String");
                        if(context.getStringValue("Desarrollo_Datawarehouse_Server") == null) {
                            context.Desarrollo_Datawarehouse_Server = null;
                        } else {
                            context.Desarrollo_Datawarehouse_Server=(String) context.getProperty("Desarrollo_Datawarehouse_Server");
                        }
                        context.setContextType("Desarrollo_Datawarehouse_Password", "id_Password");
                        if(context.getStringValue("Desarrollo_Datawarehouse_Password") == null) {
                            context.Desarrollo_Datawarehouse_Password = null;
                        } else {
                            String pwd_Desarrollo_Datawarehouse_Password_value = context.getProperty("Desarrollo_Datawarehouse_Password");
                            context.Desarrollo_Datawarehouse_Password = null;
                            if(pwd_Desarrollo_Datawarehouse_Password_value!=null) {
                                if(context_param.containsKey("Desarrollo_Datawarehouse_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.Desarrollo_Datawarehouse_Password = pwd_Desarrollo_Datawarehouse_Password_value;
                                } else if (!pwd_Desarrollo_Datawarehouse_Password_value.isEmpty()) {
                                    try {
                                        context.Desarrollo_Datawarehouse_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Desarrollo_Datawarehouse_Password_value);
                                        context.put("Desarrollo_Datawarehouse_Password",context.Desarrollo_Datawarehouse_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("Desarrollo_Datawarehouse_Database", "id_String");
                        if(context.getStringValue("Desarrollo_Datawarehouse_Database") == null) {
                            context.Desarrollo_Datawarehouse_Database = null;
                        } else {
                            context.Desarrollo_Datawarehouse_Database=(String) context.getProperty("Desarrollo_Datawarehouse_Database");
                        }
                        context.setContextType("Desarrollo_Datawarehouse_Port", "id_String");
                        if(context.getStringValue("Desarrollo_Datawarehouse_Port") == null) {
                            context.Desarrollo_Datawarehouse_Port = null;
                        } else {
                            context.Desarrollo_Datawarehouse_Port=(String) context.getProperty("Desarrollo_Datawarehouse_Port");
                        }
                        context.setContextType("Desarrollo_Datawarehouse_Schema", "id_String");
                        if(context.getStringValue("Desarrollo_Datawarehouse_Schema") == null) {
                            context.Desarrollo_Datawarehouse_Schema = null;
                        } else {
                            context.Desarrollo_Datawarehouse_Schema=(String) context.getProperty("Desarrollo_Datawarehouse_Schema");
                        }
                        context.setContextType("Desarrollo_Datawarehouse_Login", "id_String");
                        if(context.getStringValue("Desarrollo_Datawarehouse_Login") == null) {
                            context.Desarrollo_Datawarehouse_Login = null;
                        } else {
                            context.Desarrollo_Datawarehouse_Login=(String) context.getProperty("Desarrollo_Datawarehouse_Login");
                        }
                        context.setContextType("Desarrollo_Transaccional_Database", "id_String");
                        if(context.getStringValue("Desarrollo_Transaccional_Database") == null) {
                            context.Desarrollo_Transaccional_Database = null;
                        } else {
                            context.Desarrollo_Transaccional_Database=(String) context.getProperty("Desarrollo_Transaccional_Database");
                        }
                        context.setContextType("Desarrollo_Transaccional_Password", "id_Password");
                        if(context.getStringValue("Desarrollo_Transaccional_Password") == null) {
                            context.Desarrollo_Transaccional_Password = null;
                        } else {
                            String pwd_Desarrollo_Transaccional_Password_value = context.getProperty("Desarrollo_Transaccional_Password");
                            context.Desarrollo_Transaccional_Password = null;
                            if(pwd_Desarrollo_Transaccional_Password_value!=null) {
                                if(context_param.containsKey("Desarrollo_Transaccional_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.Desarrollo_Transaccional_Password = pwd_Desarrollo_Transaccional_Password_value;
                                } else if (!pwd_Desarrollo_Transaccional_Password_value.isEmpty()) {
                                    try {
                                        context.Desarrollo_Transaccional_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Desarrollo_Transaccional_Password_value);
                                        context.put("Desarrollo_Transaccional_Password",context.Desarrollo_Transaccional_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("Desarrollo_Transaccional_AdditionalParams", "id_String");
                        if(context.getStringValue("Desarrollo_Transaccional_AdditionalParams") == null) {
                            context.Desarrollo_Transaccional_AdditionalParams = null;
                        } else {
                            context.Desarrollo_Transaccional_AdditionalParams=(String) context.getProperty("Desarrollo_Transaccional_AdditionalParams");
                        }
                        context.setContextType("Desarrollo_Transaccional_Schema", "id_String");
                        if(context.getStringValue("Desarrollo_Transaccional_Schema") == null) {
                            context.Desarrollo_Transaccional_Schema = null;
                        } else {
                            context.Desarrollo_Transaccional_Schema=(String) context.getProperty("Desarrollo_Transaccional_Schema");
                        }
                        context.setContextType("Desarrollo_Transaccional_Login", "id_String");
                        if(context.getStringValue("Desarrollo_Transaccional_Login") == null) {
                            context.Desarrollo_Transaccional_Login = null;
                        } else {
                            context.Desarrollo_Transaccional_Login=(String) context.getProperty("Desarrollo_Transaccional_Login");
                        }
                        context.setContextType("Desarrollo_Transaccional_Port", "id_String");
                        if(context.getStringValue("Desarrollo_Transaccional_Port") == null) {
                            context.Desarrollo_Transaccional_Port = null;
                        } else {
                            context.Desarrollo_Transaccional_Port=(String) context.getProperty("Desarrollo_Transaccional_Port");
                        }
                        context.setContextType("Desarrollo_Transaccional_Server", "id_String");
                        if(context.getStringValue("Desarrollo_Transaccional_Server") == null) {
                            context.Desarrollo_Transaccional_Server = null;
                        } else {
                            context.Desarrollo_Transaccional_Server=(String) context.getProperty("Desarrollo_Transaccional_Server");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("Desarrollo_Datawarehouse_AdditionalParams")) {
                context.Desarrollo_Datawarehouse_AdditionalParams = (String) parentContextMap.get("Desarrollo_Datawarehouse_AdditionalParams");
            }if (parentContextMap.containsKey("Desarrollo_Datawarehouse_Server")) {
                context.Desarrollo_Datawarehouse_Server = (String) parentContextMap.get("Desarrollo_Datawarehouse_Server");
            }if (parentContextMap.containsKey("Desarrollo_Datawarehouse_Password")) {
                context.Desarrollo_Datawarehouse_Password = (java.lang.String) parentContextMap.get("Desarrollo_Datawarehouse_Password");
            }if (parentContextMap.containsKey("Desarrollo_Datawarehouse_Database")) {
                context.Desarrollo_Datawarehouse_Database = (String) parentContextMap.get("Desarrollo_Datawarehouse_Database");
            }if (parentContextMap.containsKey("Desarrollo_Datawarehouse_Port")) {
                context.Desarrollo_Datawarehouse_Port = (String) parentContextMap.get("Desarrollo_Datawarehouse_Port");
            }if (parentContextMap.containsKey("Desarrollo_Datawarehouse_Schema")) {
                context.Desarrollo_Datawarehouse_Schema = (String) parentContextMap.get("Desarrollo_Datawarehouse_Schema");
            }if (parentContextMap.containsKey("Desarrollo_Datawarehouse_Login")) {
                context.Desarrollo_Datawarehouse_Login = (String) parentContextMap.get("Desarrollo_Datawarehouse_Login");
            }if (parentContextMap.containsKey("Desarrollo_Transaccional_Database")) {
                context.Desarrollo_Transaccional_Database = (String) parentContextMap.get("Desarrollo_Transaccional_Database");
            }if (parentContextMap.containsKey("Desarrollo_Transaccional_Password")) {
                context.Desarrollo_Transaccional_Password = (java.lang.String) parentContextMap.get("Desarrollo_Transaccional_Password");
            }if (parentContextMap.containsKey("Desarrollo_Transaccional_AdditionalParams")) {
                context.Desarrollo_Transaccional_AdditionalParams = (String) parentContextMap.get("Desarrollo_Transaccional_AdditionalParams");
            }if (parentContextMap.containsKey("Desarrollo_Transaccional_Schema")) {
                context.Desarrollo_Transaccional_Schema = (String) parentContextMap.get("Desarrollo_Transaccional_Schema");
            }if (parentContextMap.containsKey("Desarrollo_Transaccional_Login")) {
                context.Desarrollo_Transaccional_Login = (String) parentContextMap.get("Desarrollo_Transaccional_Login");
            }if (parentContextMap.containsKey("Desarrollo_Transaccional_Port")) {
                context.Desarrollo_Transaccional_Port = (String) parentContextMap.get("Desarrollo_Transaccional_Port");
            }if (parentContextMap.containsKey("Desarrollo_Transaccional_Server")) {
                context.Desarrollo_Transaccional_Server = (String) parentContextMap.get("Desarrollo_Transaccional_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("Desarrollo_Datawarehouse_Password");
			parametersToEncrypt.add("Desarrollo_Transaccional_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        talendStats_STATS.addMessage("begin");


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;preStaLogConProcess(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_preStaLogCon) {
globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

e_preStaLogCon.printStackTrace();

}



        try {
            talendStats_STATSProcess(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_1) {
globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

e_tDBConnection_1.printStackTrace();

}
try {
errorCode = null;tDBConnection_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_2) {
globalMap.put("tDBConnection_2_SUBPROCESS_STATE", -1);

e_tDBConnection_2.printStackTrace();

}
try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DimProducto");
        }
        talendStats_STATS.addMessage(status==""?"end":status, (end-startTime));
        try {
            talendStats_STATSProcess(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_connectionStatsLogs");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_connectionStatsLogs", globalMap.get("conn_connectionStatsLogs"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     245215 characters generated by Talend Open Studio for Data Integration 
 *     on the September 4, 2023 at 9:24:11 PM CST
 ************************************************************************************************/